[{"D:\\github\\Habit-Tracker\\frontend\\src\\index.js":"1","D:\\github\\Habit-Tracker\\frontend\\src\\reportWebVitals.js":"2","D:\\github\\Habit-Tracker\\frontend\\src\\App.js":"3","D:\\github\\Habit-Tracker\\frontend\\src\\store.js":"4","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Home.js":"5","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Login.js":"6","D:\\github\\Habit-Tracker\\frontend\\src\\components\\TrackHabit.js":"7","D:\\github\\Habit-Tracker\\frontend\\src\\components\\AllHabits.js":"8","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Progress.js":"9","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\HabitCard.js":"10","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\Header.js":"11","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\NewHabit.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":3243,"mtime":1609225527141,"results":"16","hashOfConfig":"14"},{"size":992,"mtime":1609003385253,"results":"17","hashOfConfig":"14"},{"size":3202,"mtime":1609945406984,"results":"18","hashOfConfig":"14"},{"size":13919,"mtime":1609225527142,"results":"19","hashOfConfig":"14"},{"size":2922,"mtime":1610026531255,"results":"20","hashOfConfig":"14"},{"size":1445,"mtime":1609229362056,"results":"21","hashOfConfig":"14"},{"size":1440,"mtime":1609229391207,"results":"22","hashOfConfig":"14"},{"size":1524,"mtime":1610005303240,"results":"23","hashOfConfig":"14"},{"size":861,"mtime":1609944341999,"results":"24","hashOfConfig":"14"},{"size":2628,"mtime":1610026070096,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ng3klm",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\github\\Habit-Tracker\\frontend\\src\\index.js",[],["56","57"],"D:\\github\\Habit-Tracker\\frontend\\src\\reportWebVitals.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\App.js",["58","59","60","61","62"],"import React from 'react';\r\nimport Login from './components/Login';\r\nimport Home from './components/Home';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\nimport { BrowserRouter as Router,\r\n         Switch,\r\n         Route,\r\n         Redirect,\r\n         useHistory\r\n} from 'react-router-dom';\r\nimport { gql, useLazyQuery } from '@apollo/client';\r\nimport 'antd/dist/antd.css';\r\nimport { StateProvider, store } from './store';\r\n\r\n//Apollo client object. Used to make requests to the graphql API.\r\nconst client = new ApolloClient({\r\n  uri: 'https://habit-tracker.hasura.app/v1/graphql',\r\n  cache: new InMemoryCache(),\r\n  headers:{\r\n    'x-hasura-access': process.env.REACT_APP_API_PASS,\r\n  },\r\n});\r\n\r\nfunction PrivateRoute({ children, ...rest }) {\r\n\r\n  //Lazy query for user auth\r\n  const [getUser, getUserResult] = useLazyQuery(\r\n    gql`query getUser($email: String!){\r\n        users(where: {email: {_eq: $email}}) {\r\n          full_name\r\n          createdAt\r\n          email\r\n          habits {\r\n            bad_habit\r\n            end_date\r\n            habit_cycle\r\n            name\r\n            id\r\n            remainder_note\r\n            reminder_times\r\n            start_date\r\n            streak\r\n            unit\r\n          }\r\n        }\r\n      }`\r\n  );\r\n  const { state, dispatch } = React.useContext(store);\r\n  const sessionStore = sessionStorage.getItem('HabitTrackerUser');      // session storage user's emailID\r\n  const [ isAuthenticated, setAuthenticated ] = React.useState( !!state.full_name || !!sessionStore);\r\n  const history = useHistory();\r\n\r\n  // To fetch user data if users refreshes the page\r\n  // React.useEffect(() => {\r\n\r\n  //   if (sessionStore !== null && !isAuthenticated) {\r\n  //     setAuthenticated(true);\r\n  //     console.log('sessionstore:', sessionStore);\r\n  //     getUser({\r\n  //         variables:{\r\n  //             email: sessionStore,\r\n  //         }\r\n  //     });\r\n  //     while(getUserResult.loading){ }\r\n  //     if(getUserResult.error){\r\n  //         // handleError(getUserResult.error);\r\n  //         console.log('Error:',getUserResult.error)\r\n  //     }\r\n  //     else{\r\n  //         console.log('DATAA:::::', getUserResult)\r\n  //         const {data} = getUserResult;\r\n  //         if(data !== undefined){\r\n  //             dispatch(data.users[0]);\r\n  //         }\r\n  //         else{\r\n  //           history.replace('/login');\r\n  //         }\r\n  //     }\r\n  //   }\r\n\r\n  // }, []);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={() =>\r\n        isAuthenticated ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",       // redirect if not autheticated\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction App() {\r\n\r\n  return (\r\n   <StateProvider>\r\n      <ApolloProvider client={client}>\r\n         <Router>\r\n             <Switch>\r\n                 <Route exact path=\"/login\">\r\n                     <Login />\r\n                 </Route>\r\n                 <PrivateRoute exact path=\"/\">\r\n                     <Home />\r\n                 </PrivateRoute>\r\n             </Switch>\r\n         </Router>\r\n      </ApolloProvider>\r\n   </StateProvider>\r\n  );\r\n}\r\n\r\nexport default App;","D:\\github\\Habit-Tracker\\frontend\\src\\store.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\Home.js",["63"],"import React from 'react';\r\nimport { \r\n    Layout, \r\n    Menu,\r\n    Spin\r\n } from 'antd';\r\nimport {\r\n  BarChartOutlined,\r\n  UserOutlined,\r\n  FormOutlined,\r\n} from '@ant-design/icons';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { BrowserRouter as Router,\r\n    Link,\r\n    Route,\r\n    Switch,\r\n} from 'react-router-dom';\r\nimport TrackHabit from './TrackHabit';\r\nimport AllHabits from './AllHabits';\r\nimport Progress from './Progress';\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nconst headerStyle = {\r\n    fontFamily: '\"Krona One\", Sans-serif',\r\n    fontSize: '14pt',\r\n    color: '#fff',\r\n    textAlign: 'center'\r\n};\r\n\r\nconst loadingStyle = {\r\n    textAlign: 'center',\r\n    flex: 1,\r\n    borderRadius: '4px',\r\n    padding: '30px 50px',\r\n    margin: '20px 0',\r\n    marginTop: '50vh'\r\n}\r\n\r\nconst getUser = gql `\r\n    query getUser($email: String!){\r\n    users(where: {email: {_eq: $email}}) {\r\n      full_name\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Home () {\r\n\r\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\r\n    \r\n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <div style={loadingStyle} >\r\n                <Spin/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        console.log(error);\r\n        return (\r\n            <div style={loadingStyle}>\r\n                <h4> Something went wrong! </h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    {   const user = data.users[0];\r\n        return (\r\n        <Router>\r\n        <Layout style={{height:\"100vh\"}}>\r\n            <Sider\r\n            style={{\r\n                overflow: 'auto',\r\n                height: '100vh',\r\n                position: 'fixed',\r\n                left: 0,\r\n            }}\r\n            >\r\n            <div className=\"logo\" />\r\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n                <Header className=\"site-layout-background\" style={{ padding: 0 }} >\r\n                    <h1 style={headerStyle}>Habit Tracker</h1>\r\n                </Header>\r\n                <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                    {user.full_name}\r\n                    <Link to=\"/\" />\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<FormOutlined />}>\r\n                    All Habits\r\n                    <Link to=\"/all\" />\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<BarChartOutlined />}>\r\n                    Progress\r\n                    <Link to=\"/progress\" />\r\n                </Menu.Item>\r\n            </Menu>\r\n            </Sider>\r\n            <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\r\n            <Content style={{ margin: '24px 16px 0', overflow: 'initial', flex:1, height: '100vh' }}>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={TrackHabit} />\r\n                    <Route exact path=\"/all\" component={AllHabits} />\r\n                    <Route exact path=\"/progress\" component={Progress} />\r\n                </Switch>\r\n            </Content>\r\n            </Layout>\r\n        </Layout>\r\n        </Router>\r\n        )\r\n    }\r\n}","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Login.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\TrackHabit.js",["64"],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\AllHabits.js",["65","66"],"import React from 'react';\r\nimport { \r\n    Spin\r\n } from 'antd';\r\nimport { store } from '../store';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst loadingStyle = {\r\n    textAlign: 'center',\r\n    flex: 1,\r\n    borderRadius: '4px',\r\n    padding: '30px 50px',\r\n    margin: '20px 0',\r\n    marginTop: '50vh'\r\n}\r\n\r\nconst getUser = gql `\r\n    query getUser($email: String!){\r\n    users(where: {email: {_eq: $email}}) {\r\n      full_name\r\n      createdAt\r\n      email\r\n      habits {\r\n        bad_habit\r\n        end_date\r\n        habit_cycle\r\n        name\r\n        id\r\n        remainder_note\r\n        reminder_times\r\n        start_date\r\n        streak\r\n        unit\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function AllHabits () {\r\n\r\n    //using global store with context\r\n    const { state } = React.useContext(store); \r\n\r\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\r\n    \r\n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <div style={loadingStyle} >\r\n                <Spin/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        console.log(error);\r\n        return (\r\n            <div style={loadingStyle}>\r\n                <h4> Something went wrong! </h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    {   const user = data.users[0];\r\n        return (\r\n        <h2>All Habits</h2>\r\n        )\r\n    }\r\n}","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Progress.js",["67","68"],"import React from 'react';\r\nimport { \r\n    Spin\r\n } from 'antd';\r\nimport { store } from '../store';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst loadingStyle = {\r\n    textAlign: 'center',\r\n    flex: 1,\r\n    borderRadius: '4px',\r\n    padding: '30px 50px',\r\n    margin: '20px 0',\r\n    marginTop: '50vh'\r\n}\r\n\r\nconst getUser = gql `\r\n    query getUser($email: String!){\r\n    users(where: {email: {_eq: $email}}) {\r\n      full_name\r\n      createdAt\r\n      email\r\n      habits {\r\n        bad_habit\r\n        end_date\r\n        habit_cycle\r\n        name\r\n        id\r\n        remainder_note\r\n        reminder_times\r\n        start_date\r\n        streak\r\n        unit\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Progress () {\r\n\r\n    //using global store with context\r\n    const { state } = React.useContext(store); \r\n\r\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\r\n    \r\n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\r\n\r\n    if (loading) {\r\n        return (\r\n            <div style={loadingStyle} >\r\n                <Spin/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        console.log(error);\r\n        return (\r\n            <div style={loadingStyle}>\r\n                <h4> Something went wrong! </h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    {   const user = data.users[0];\r\n        return (\r\n        <h2>Progress</h2>\r\n        )\r\n    }\r\n}","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\HabitCard.js",["69"],"import React from 'react';\r\nimport { \r\n  Card, \r\n  Progress \r\n} from 'antd';\r\nimport { format } from 'date-fns'\r\n\r\nconst progress = {\r\n  display: 'flex',\r\n  flexDirection: 'col',\r\n  justifyContent: 'space-between'\r\n}\r\n\r\nconst circle = (day) => {\r\n  console.log(':::::::',  day)\r\n  return day\r\n}\r\n\r\nexport default function HabitCard({habitData}) {\r\n  habitData.history.forEach((data)=>{\r\n    var date = data.date.split('-');\r\n    console.log('history:::::::::::::',format(new Date(date), \"iii\"))\r\n  })\r\n  const [dayStatus, setStatus] = React.useState(false);\r\n  console.log('habitData: ',habitData)\r\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    return (\r\n      <div className=\"site-card-border-less-wrapper\" style={{paddingRight:30, paddingBottom: 30}}>\r\n        <Card title={habitData.name} bordered={true} style={{ width: 500 }}>\r\n          <div style={progress}>\r\n            {\r\n              days.map((day, index) => (\r\n                <div key={index} onClick={()=>setStatus(true)} >\r\n                  <Progress type=\"circle\" percent={100} width={50} format={circle} key={index} />\r\n                  <p>{day}</p>\r\n                </div>\r\n              ))\r\n            }\r\n            \r\n            {/* <Progress type=\"circle\" percent={70} width={80} status=\"exception\" />\r\n            <Progress type=\"circle\" percent={100} width={80} /> */}\r\n          </div>\r\n          <p>Card content</p>\r\n          <p>Card content</p>\r\n          <p>Card content</p>\r\n        </Card>\r\n      </div>\r\n    )\r\n}\r\n","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\Header.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\NewHabit.js",["70","71","72","73","74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":27,"column":10,"nodeType":"81","messageId":"82","endLine":27,"endColumn":17},{"ruleId":"79","severity":1,"message":"83","line":27,"column":19,"nodeType":"81","messageId":"82","endLine":27,"endColumn":32},{"ruleId":"79","severity":1,"message":"84","line":48,"column":18,"nodeType":"81","messageId":"82","endLine":48,"endColumn":26},{"ruleId":"79","severity":1,"message":"85","line":50,"column":28,"nodeType":"81","messageId":"82","endLine":50,"endColumn":44},{"ruleId":"79","severity":1,"message":"86","line":51,"column":9,"nodeType":"81","messageId":"82","endLine":51,"endColumn":16},{"ruleId":"79","severity":1,"message":"87","line":22,"column":26,"nodeType":"81","messageId":"82","endLine":22,"endColumn":32},{"ruleId":"79","severity":1,"message":"88","line":7,"column":10,"nodeType":"81","messageId":"82","endLine":7,"endColumn":15},{"ruleId":"79","severity":1,"message":"89","line":42,"column":13,"nodeType":"81","messageId":"82","endLine":42,"endColumn":18},{"ruleId":"79","severity":1,"message":"90","line":66,"column":15,"nodeType":"81","messageId":"82","endLine":66,"endColumn":19},{"ruleId":"79","severity":1,"message":"89","line":42,"column":13,"nodeType":"81","messageId":"82","endLine":42,"endColumn":18},{"ruleId":"79","severity":1,"message":"90","line":65,"column":15,"nodeType":"81","messageId":"82","endLine":65,"endColumn":19},{"ruleId":"79","severity":1,"message":"91","line":24,"column":10,"nodeType":"81","messageId":"82","endLine":24,"endColumn":19},{"ruleId":"79","severity":1,"message":"92","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":16},{"ruleId":"79","severity":1,"message":"93","line":4,"column":5,"nodeType":"81","messageId":"82","endLine":4,"endColumn":15},{"ruleId":"79","severity":1,"message":"94","line":11,"column":5,"nodeType":"81","messageId":"82","endLine":11,"endColumn":11},{"ruleId":"79","severity":1,"message":"95","line":15,"column":7,"nodeType":"81","messageId":"82","endLine":15,"endColumn":22},{"ruleId":"79","severity":1,"message":"96","line":30,"column":11,"nodeType":"81","messageId":"82","endLine":30,"endColumn":21},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'getUser' is assigned a value but never used.","Identifier","unusedVar","'getUserResult' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'setAuthenticated' is assigned a value but never used.","'history' is assigned a value but never used.","'Footer' is assigned a value but never used.","'store' is defined but never used.","'state' is assigned a value but never used.","'user' is assigned a value but never used.","'dayStatus' is assigned a value but never used.","'format' is defined but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","'headerContainer' is assigned a value but never used.","'onFormFail' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]