[{"D:\\github\\Habit-Tracker\\frontend\\src\\index.js":"1","D:\\github\\Habit-Tracker\\frontend\\src\\reportWebVitals.js":"2","D:\\github\\Habit-Tracker\\frontend\\src\\App.js":"3","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Login.js":"4","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Home.js":"5","D:\\github\\Habit-Tracker\\frontend\\src\\components\\TrackHabit.js":"6","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\Header.js":"7","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\NewHabit.js":"8","D:\\github\\Habit-Tracker\\frontend\\src\\query.js":"9","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\HabitCard.js":"10","D:\\github\\Habit-Tracker\\frontend\\src\\components\\HabitHistory.js":"11","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Progress.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1525,"mtime":1611248874720,"results":"16","hashOfConfig":"14"},{"size":14160,"mtime":1610824461553,"results":"17","hashOfConfig":"14"},{"size":3518,"mtime":1611318062692,"results":"18","hashOfConfig":"14"},{"size":3536,"mtime":1611249064545,"results":"19","hashOfConfig":"14"},{"size":861,"mtime":1610817791595,"results":"20","hashOfConfig":"14"},{"size":6328,"mtime":1611313982902,"results":"21","hashOfConfig":"14"},{"size":1905,"mtime":1611317449695,"results":"22","hashOfConfig":"14"},{"size":7095,"mtime":1611320731096,"results":"23","hashOfConfig":"14"},{"size":2784,"mtime":1611249064544,"results":"24","hashOfConfig":"14"},{"size":1426,"mtime":1611318060218,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ng3klm",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"D:\\github\\Habit-Tracker\\frontend\\src\\index.js",[],["55","56"],"D:\\github\\Habit-Tracker\\frontend\\src\\reportWebVitals.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\App.js",["57"],"import React from 'react';\r\nimport Login from './components/Login';\r\nimport Home from './components/Home';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\nimport { BrowserRouter as Router,\r\n         Switch,\r\n         Route,\r\n         Redirect,\r\n         useHistory\r\n} from 'react-router-dom';\r\nimport 'antd/dist/antd.css';\r\n\r\n//Apollo client object. Used to make requests to the graphql API.\r\nconst client = new ApolloClient({\r\n  uri: 'https://habit-tracker.hasura.app/v1/graphql',\r\n  cache: new InMemoryCache(),\r\n  headers:{\r\n    'x-hasura-access': process.env.REACT_APP_API_PASS,\r\n  },\r\n});\r\n\r\nfunction PrivateRoute({ children, ...rest }) {\r\n\r\n  const sessionStore = sessionStorage.getItem('HabitTrackerUser');      // session storage user's emailID\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={() =>\r\n        !!sessionStore ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",       // redirect if not autheticated\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction App() {\r\n\r\n  return (\r\n      <ApolloProvider client={client}>\r\n         <Router>\r\n             <Switch>\r\n                 <Route exact path=\"/login\">\r\n                     <Login />\r\n                 </Route>\r\n                 <PrivateRoute exact path=\"/\">\r\n                     <Home />\r\n                 </PrivateRoute>\r\n             </Switch>\r\n         </Router>\r\n      </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Login.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\Home.js",["58"],"import React from 'react';\r\nimport { \r\n    Layout, \r\n    Menu,\r\n    Spin\r\n } from 'antd';\r\nimport {\r\n  BarChartOutlined,\r\n  UserOutlined,\r\n  FormOutlined,\r\n  LogoutOutlined,\r\n} from '@ant-design/icons';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { BrowserRouter as Router,\r\n    Link,\r\n    Route,\r\n    Switch,\r\n    useHistory\r\n} from 'react-router-dom';\r\nimport TrackHabit from './TrackHabit';\r\nimport Progress from './Progress';\r\nimport HabitHistory from './HabitHistory';\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nconst headerStyle = {\r\n    fontFamily: '\"Krona One\", Sans-serif',\r\n    fontSize: '14pt',\r\n    color: '#fff',\r\n    textAlign: 'center'\r\n};\r\n\r\nconst loadingStyle = {\r\n    textAlign: 'center',\r\n    flex: 1,\r\n    borderRadius: '4px',\r\n    padding: '30px 50px',\r\n    margin: '20px 0',\r\n    marginTop: '50vh'\r\n}\r\n\r\nconst getUser = gql `\r\n    query getUser($email: String!){\r\n    users(where: {email: {_eq: $email}}) {\r\n      full_name\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Home () {\r\n\r\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\r\n    const history = useHistory();\r\n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <div style={loadingStyle} >\r\n                <Spin/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        console.log(error);\r\n        return (\r\n            <div style={loadingStyle}>\r\n                <h4> Something went wrong! </h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    {   const user = data.users[0];\r\n        return (\r\n        <Router>\r\n        <Layout style={{height:\"100vh\"}}>\r\n            <Sider\r\n            style={{\r\n                overflow: 'auto',\r\n                height: '100vh',\r\n                position: 'fixed',\r\n                left: 0,\r\n            }}\r\n            >\r\n            <div className=\"logo\" />\r\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n                <Header className=\"site-layout-background\" style={{ padding: 0 }} >\r\n                    <h1 style={headerStyle}>Habit Tracker</h1>\r\n                </Header>\r\n                <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                    {user.full_name}\r\n                    <Link to=\"/\" />\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<BarChartOutlined />}>\r\n                    Progress\r\n                    <Link to=\"/all\" />\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<FormOutlined />}>\r\n                    History\r\n                    <Link to=\"/HabitHistory\" />\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" icon={<LogoutOutlined />} onClick={()=>{\r\n                    sessionStorage.clear();\r\n                    history.push();\r\n                }}>\r\n                    Logout\r\n                </Menu.Item>\r\n            </Menu>\r\n            </Sider>\r\n            <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\r\n            <Content style={{ margin: '24px 16px 0', overflow: 'initial', flex:1, height: '100vh' }}>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={TrackHabit} />\r\n                    <Route exact path=\"/all\" component={Progress} />\r\n                    <Route exact path=\"/HabitHistory\" component={HabitHistory} />\r\n                </Switch>\r\n            </Content>\r\n            </Layout>\r\n        </Layout>\r\n        </Router>\r\n        )\r\n    }\r\n}","D:\\github\\Habit-Tracker\\frontend\\src\\components\\TrackHabit.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\Header.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\NewHabit.js",["59","60","61","62","63","64","65","66","67","68","69"],"import React, { useState } from 'react'\r\nimport { format } from 'date-fns'\r\nimport moment from 'moment';\r\nimport { \r\n    Form, \r\n    DatePicker, \r\n    Select,\r\n    InputNumber,\r\n    Input,\r\n    TimePicker,\r\n    Button\r\n    } from 'antd';\r\nimport { gql, useMutation } from '@apollo/client'\r\nimport { GET_USER_DETAILS, EDIT_HABIT } from '../../query';\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst headerContainer = {\r\n    display:'flex',\r\n    flexDirection:'row',\r\n    justifyContent:'space-between'\r\n}\r\n\r\nconst ADD_NEW_HABIT = gql`\r\n    mutation AddNewHabit($user_id: String!, $habit_name: String!, $type: habit_unit!, $note: String, $bad_habit: Boolean, $start_date: date, $end_date: date, $reps: Int, $duration: Int) {\r\n        insert_habits_one(object: {\r\n        name: $habit_name, \r\n        user: $user_id, \r\n        start_date: $start_date, \r\n        remainder_note: $note, \r\n        unit: $type, \r\n        end_date: $end_date, \r\n        reps: $reps,\r\n        duration: $duration\r\n        bad_habit: $bad_habit\r\n        }) {\r\n        id\r\n        }\r\n    }\r\n`;\r\n\r\nconst disabledDate = current => {\r\n    return current && current < moment().subtract(1, 'days');\r\n  }\r\n\r\nexport default function NewHabit({ setVisible, userID, editHabitDate }) {\r\n\r\n    const [form] = Form.useForm();\r\n    React.useEffect(()=>{\r\n        form.resetFields();\r\n    },[editHabitDate])\r\n    const [habitType, setHabitType] = useState(null);\r\n    const [addNewHabit, {data, error}] = useMutation(ADD_NEW_HABIT);\r\n    const [editHabit] = useMutation(EDIT_HABIT);\r\n    const onFinish = (values) => {\r\n        console.log('values:::::::::::::::::::', format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"))\r\n        {(editHabitDate)\r\n        ? editHabit({\r\n            variables: {\r\n                id: editHabitDate.id,\r\n                user_id: userID,\r\n                habit_name: values.habit_name,\r\n                type: values.type,\r\n                start_date: format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"),\r\n                end_date: format(new Date(values.date_range[1]._d), \"yyyy-MM-dd\"),\r\n                reps: values.reps_no ? values.reps_no : null,\r\n                note: values.note ? values.note : null,\r\n                duration: values.duration ? values.duration : null\r\n            },\r\n            refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }],\r\n        })\r\n        : addNewHabit({\r\n            variables: {\r\n                user_id: userID,\r\n                habit_name: values.habit_name,\r\n                type: values.type,\r\n                start_date: format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"),\r\n                end_date: format(new Date(values.date_range[1]._d), \"yyyy-MM-dd\"),\r\n                reps: values.reps_no ? values.reps_no : null,\r\n                note: values.note ? values.note : null,\r\n                duration: values.duration ? values.duration : null\r\n            },\r\n            refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }],\r\n        })}\r\n        form.resetFields();\r\n        setVisible(false);\r\n    }\r\n    const onFormFail = (value) => {\r\n        setVisible(true);\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            labelCol={{ span: 6 }}\r\n            wrapperCol={{ span: 14 }}\r\n            layout=\"horizontal\"\r\n            form={form}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFormFail}\r\n            id='new_habit'\r\n        >\r\n            <Form.Item\r\n                name='habit_name'\r\n                label=\"Habit\"\r\n                rules={[{ required: true, message: \"Please input Habit's Name!\" }]}\r\n                initialValue={!!editHabitDate ? editHabitDate.name : \"\"}\r\n            >\r\n                <Input placeholder=\"Enter Name of the Habit\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n                name='type'\r\n                label=\"Type\"\r\n                rules={[{ required: true, message: \"Please Select Type of Habit!\" }]}\r\n                initialValue={editHabitDate ? editHabitDate.unit : \"\"}\r\n            >\r\n                <Select onChange={(type)=>setHabitType(type)} placeholder=\"Enter Type of Habit\">\r\n                    <Select.Option value=\"CHECK\">Yes/No</Select.Option>\r\n                    <Select.Option value=\"REPS\">Integer Habit(Reps)</Select.Option>\r\n                    <Select.Option value=\"DURATION\">Timed Habit</Select.Option>\r\n                    {/* <Select.Option value=\"DURATION\">Bad Habit</Select.Option> */}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name='date_range'\r\n                label=\"Date\"\r\n                rules={[{ required: true, message: \"Please Select date!\" }]}\r\n                initialValue={editHabitDate ? [moment(editHabitDate.start_date), moment(editHabitDate.end_date)] : \"\"}\r\n            >\r\n                <RangePicker disabledDate={disabledDate} />\r\n            </Form.Item>\r\n            { (habitType === 'REPS' || editHabitDate && editHabitDate.unit === 'REPS') &&\r\n                <Form.Item \r\n                    name=\"reps_no\" \r\n                    label=\"Count\"\r\n                    rules={[{ required: true, message: \"Please Select Reps no.!\" }]}\r\n                    initialValue={editHabitDate ? editHabitDate.reps : \"\"}\r\n                >\r\n                    <InputNumber min={1}/>\r\n                </Form.Item>\r\n            }\r\n            { (habitType === 'DURATION' || editHabitDate && (editHabitDate.unit === 'DURATION')) &&\r\n                <Form.Item \r\n                    name=\"duration\" \r\n                    label=\"Duration(mins)\"\r\n                    rules={[{ required: true, message: \"Please Select Duration!\" }]}\r\n                    initialValue={editHabitDate ? editHabitDate.duration : \"\"}\r\n                >\r\n                    <InputNumber min={1}/>\r\n                </Form.Item>\r\n            }\r\n            <Form.Item\r\n                name='note'\r\n                label=\"Note\"\r\n                // rules={[{ required: true, message: \"Please input Habit's Name!\" }]}\r\n                initialValue={editHabitDate ? editHabitDate.remainder_note : \"\"}\r\n            >\r\n                <Input placeholder=\"Enter Note for the Habit\" defaultValue={editHabitDate ? editHabitDate.remainder_note : \"\"} />\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n","D:\\github\\Habit-Tracker\\frontend\\src\\query.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\HabitCard.js",["70"],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\HabitHistory.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\Progress.js",["71"],"import React from 'react';\r\nimport { \r\n    Spin\r\n } from 'antd';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst loadingStyle = {\r\n    textAlign: 'center',\r\n    flex: 1,\r\n    borderRadius: '4px',\r\n    padding: '30px 50px',\r\n    margin: '20px 0',\r\n    marginTop: '50vh'\r\n}\r\n\r\nconst getUser = gql `\r\n    query getUser($email: String!){\r\n    users(where: {email: {_eq: $email}}) {\r\n      full_name\r\n      createdAt\r\n      email\r\n      habits {\r\n        bad_habit\r\n        end_date\r\n        habit_cycle\r\n        name\r\n        id\r\n        remainder_note\r\n        reminder_times\r\n        start_date\r\n        streak\r\n        unit\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function AllHabits () {\r\n\r\n    //using global store with context\r\n\r\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\r\n    console.log(sessionStore)\r\n    \r\n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\r\n\r\n    console.log('data : ', data)\r\n\r\n    if (loading) {\r\n        return (\r\n            <div style={loadingStyle} >\r\n                <Spin/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        console.log(error);\r\n        return (\r\n            <div style={loadingStyle}>\r\n                <h4> Something went wrong! </h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    {   const user = data.users[0];\r\n        return (\r\n        <h2>All Habits</h2>\r\n        )\r\n    }\r\n}",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":9,"column":10,"nodeType":"78","messageId":"79","endLine":9,"endColumn":20},{"ruleId":"76","severity":1,"message":"80","line":24,"column":26,"nodeType":"78","messageId":"79","endLine":24,"endColumn":32},{"ruleId":"76","severity":1,"message":"81","line":10,"column":5,"nodeType":"78","messageId":"79","endLine":10,"endColumn":15},{"ruleId":"76","severity":1,"message":"82","line":11,"column":5,"nodeType":"78","messageId":"79","endLine":11,"endColumn":11},{"ruleId":"76","severity":1,"message":"83","line":17,"column":7,"nodeType":"78","messageId":"79","endLine":17,"endColumn":22},{"ruleId":"84","severity":1,"message":"85","line":50,"column":7,"nodeType":"86","endLine":50,"endColumn":22,"suggestions":"87"},{"ruleId":"76","severity":1,"message":"88","line":52,"column":26,"nodeType":"78","messageId":"79","endLine":52,"endColumn":30},{"ruleId":"76","severity":1,"message":"89","line":52,"column":32,"nodeType":"78","messageId":"79","endLine":52,"endColumn":37},{"ruleId":"90","severity":1,"message":"91","line":56,"column":9,"nodeType":"92","messageId":"93","endLine":83,"endColumn":12},{"ruleId":"94","severity":1,"message":"95","line":130,"column":37,"nodeType":"96","messageId":"97","endLine":130,"endColumn":39},{"ruleId":"94","severity":1,"message":"95","line":130,"column":54,"nodeType":"96","messageId":"97","endLine":130,"endColumn":56},{"ruleId":"94","severity":1,"message":"95","line":140,"column":41,"nodeType":"96","messageId":"97","endLine":140,"endColumn":43},{"ruleId":"94","severity":1,"message":"95","line":140,"column":58,"nodeType":"96","messageId":"97","endLine":140,"endColumn":60},{"ruleId":"98","severity":1,"message":"99","line":151,"column":42,"nodeType":"100","messageId":"101","endLine":151,"endColumn":44},{"ruleId":"76","severity":1,"message":"102","line":66,"column":15,"nodeType":"78","messageId":"79","endLine":66,"endColumn":19},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'Footer' is assigned a value but never used.","'TimePicker' is defined but never used.","'Button' is defined but never used.","'headerContainer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","ArrayExpression",["105"],"'data' is assigned a value but never used.","'error' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [editHabitDate, form]",{"range":"108","text":"109"},[1348,1363],"[editHabitDate, form]"]