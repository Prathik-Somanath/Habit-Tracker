[{"/Users/rto/Desktop/Habit-Tracker/frontend/src/index.js":"1","/Users/rto/Desktop/Habit-Tracker/frontend/src/reportWebVitals.js":"2","/Users/rto/Desktop/Habit-Tracker/frontend/src/App.js":"3","/Users/rto/Desktop/Habit-Tracker/frontend/src/store.js":"4","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Login.js":"5","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Home.js":"6","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/AllHabits.js":"7","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/TrackHabit.js":"8","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Progress.js":"9","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/Header.js":"10","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/HabitCard.js":"11"},{"size":500,"mtime":1607443077526,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1607443077526,"results":"14","hashOfConfig":"13"},{"size":3123,"mtime":1608986741353,"results":"15","hashOfConfig":"13"},{"size":961,"mtime":1608986510077,"results":"16","hashOfConfig":"13"},{"size":13575,"mtime":1608995450050,"results":"17","hashOfConfig":"13"},{"size":3056,"mtime":1608987314562,"results":"18","hashOfConfig":"13"},{"size":1481,"mtime":1608986510075,"results":"19","hashOfConfig":"13"},{"size":1917,"mtime":1608986510076,"results":"20","hashOfConfig":"13"},{"size":1478,"mtime":1608986510076,"results":"21","hashOfConfig":"13"},{"size":782,"mtime":1608986510077,"results":"22","hashOfConfig":"13"},{"size":1199,"mtime":1608986510076,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"13uy812",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"/Users/rto/Desktop/Habit-Tracker/frontend/src/index.js",[],["52","53"],"/Users/rto/Desktop/Habit-Tracker/frontend/src/reportWebVitals.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/App.js",["54","55","56","57","58"],"import React from 'react';\nimport Login from './components/Login';\nimport Home from './components/Home';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router,\n         Switch,\n         Route,\n         Redirect,\n         useHistory\n} from 'react-router-dom';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport 'antd/dist/antd.css';\nimport { StateProvider, store } from './store';\n\n//Apollo client object. Used to make requests to the graphql API.\nconst client = new ApolloClient({\n  uri: 'https://habit-tracker.hasura.app/v1/graphql',\n  cache: new InMemoryCache(),\n  headers:{\n    'x-hasura-access': process.env.REACT_APP_API_PASS,\n  },\n});\n\nfunction PrivateRoute({ children, ...rest }) {\n\n  //Lazy query for user auth\n  const [getUser, getUserResult] = useLazyQuery(\n    gql`query getUser($email: String!){\n        users(where: {email: {_eq: $email}}) {\n          full_name\n          createdAt\n          email\n          habits {\n            bad_habit\n            end_date\n            habit_cycle\n            name\n            id\n            remainder_note\n            reminder_times\n            start_date\n            streak\n            unit\n          }\n        }\n      }`\n  );\n  const { state, dispatch } = React.useContext(store);\n  const sessionStore = sessionStorage.getItem('HabitTrackerUser');      // session storage user's emailID\n  const [ isAuthenticated, setAuthenticated ] = React.useState( !!state.full_name || !!sessionStore);\n  const history = useHistory();\n\n  // To fetch user data if users refreshes the page\n  // React.useEffect(() => {\n\n  //   if (sessionStore !== null && !isAuthenticated) {\n  //     setAuthenticated(true);\n  //     console.log('sessionstore:', sessionStore);\n  //     getUser({\n  //         variables:{\n  //             email: sessionStore,\n  //         }\n  //     });\n  //     while(getUserResult.loading){ }\n  //     if(getUserResult.error){\n  //         // handleError(getUserResult.error);\n  //         console.log('Error:',getUserResult.error)\n  //     }\n  //     else{\n  //         console.log('DATAA:::::', getUserResult)\n  //         const {data} = getUserResult;\n  //         if(data !== undefined){\n  //             dispatch(data.users[0]);\n  //         }\n  //         else{\n  //           history.replace('/login');\n  //         }\n  //     }\n  //   }\n\n  // }, []);\n\n  return (\n    <Route\n      {...rest}\n      render={() =>\n        isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",       // redirect if not autheticated\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nfunction App() {\n\n  return (\n   <StateProvider>\n      <ApolloProvider client={client}>\n         <Router>\n             <Switch>\n                 <Route exact path=\"/login\">\n                     <Login />\n                 </Route>\n                 <PrivateRoute exact path=\"/\">\n                     <Home />\n                 </PrivateRoute>\n             </Switch>\n         </Router>\n      </ApolloProvider>\n   </StateProvider>\n  );\n}\n\nexport default App;","/Users/rto/Desktop/Habit-Tracker/frontend/src/store.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Login.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Home.js",["59"],"import React from 'react';\nimport { \n    Layout, \n    Menu,\n    Spin\n } from 'antd';\nimport {\n  BarChartOutlined,\n  UserOutlined,\n  FormOutlined,\n} from '@ant-design/icons';\nimport { useQuery, gql } from '@apollo/client';\nimport { BrowserRouter as Router,\n    Link,\n    Route,\n} from 'react-router-dom';\nimport TrackHabit from './TrackHabit';\nimport AllHabits from './AllHabits';\nimport Progress from './Progress';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst headerStyle = {\n    fontFamily: '\"Krona One\", Sans-serif',\n    fontSize: '14pt',\n    color: '#fff',\n    textAlign: 'center'\n};\n\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst getUser = gql `\n    query getUser($email: String!){\n    users(where: {email: {_eq: $email}}) {\n      full_name\n    }\n  }\n`\n\nexport default function Home () {\n\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\n    console.log(sessionStore)\n    \n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\n\n    console.log('data : ', data)\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n    {   const user = data.users[0];\n        return (\n        <Router>\n        <Layout>\n            <Sider\n            style={{\n                overflow: 'auto',\n                height: '100vh',\n                position: 'fixed',\n                left: 0,\n            }}\n            >\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                <Header className=\"site-layout-background\" style={{ padding: 0 }} >\n                    <h1 style={headerStyle}>Habit Tracker</h1>\n                </Header>\n                <Menu.Item key=\"1\" icon={<UserOutlined />}>\n                    {user.full_name}\n                    <Link to=\"/\" />\n                </Menu.Item>\n                <Menu.Item key=\"2\" icon={<FormOutlined />}>\n                    All Habits\n                    <Link to=\"/all\" />\n                </Menu.Item>\n                <Menu.Item key=\"3\" icon={<BarChartOutlined />}>\n                    Progress\n                    <Link to=\"/progress\" />\n                </Menu.Item>\n            </Menu>\n            </Sider>\n            <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\n            <Content style={{ margin: '24px 16px 0', overflow: 'initial', flex:1, height: '100vh' }}>\n                <Route exact path=\"/habits\" component={TrackHabit} />\n                <Route exact path=\"/all\" component={AllHabits} />\n                <Route exact path=\"/progress\" component={Progress} />\n            </Content>\n            </Layout>\n        </Layout>\n        </Router>\n        )\n    }\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/AllHabits.js",["60"],"import React from 'react';\nimport { \n    Spin\n } from 'antd';\nimport { store } from '../store';\nimport { useQuery, gql } from '@apollo/client';\n\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst getUser = gql `\n    query getUser($email: String!){\n    users(where: {email: {_eq: $email}}) {\n      full_name\n      createdAt\n      email\n      habits {\n        bad_habit\n        end_date\n        habit_cycle\n        name\n        id\n        remainder_note\n        reminder_times\n        start_date\n        streak\n        unit\n      }\n    }\n  }\n`\n\nexport default function AllHabits () {\n\n    //using global store with context\n    const { state } = React.useContext(store); \n    console.log('STATE:',state.full_name);\n\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\n    console.log(sessionStore)\n    \n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\n\n    console.log('data : ', data)\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n    {   const user = data.users[0];\n        return (\n        <h2>All Habits</h2>\n        )\n    }\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/TrackHabit.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Progress.js",["61"],"import React from 'react';\nimport { \n    Spin\n } from 'antd';\nimport { store } from '../store';\nimport { useQuery, gql } from '@apollo/client';\n\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst getUser = gql `\n    query getUser($email: String!){\n    users(where: {email: {_eq: $email}}) {\n      full_name\n      createdAt\n      email\n      habits {\n        bad_habit\n        end_date\n        habit_cycle\n        name\n        id\n        remainder_note\n        reminder_times\n        start_date\n        streak\n        unit\n      }\n    }\n  }\n`\n\nexport default function Progress () {\n\n    //using global store with context\n    const { state } = React.useContext(store); \n    console.log('STATE:',state.full_name);\n\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\n    console.log(sessionStore)\n    \n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\n\n    console.log('data : ', data)\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n    {   const user = data.users[0];\n        return (\n        <h2>Progress</h2>\n        )\n    }\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/Header.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/HabitCard.js",["62"],"import React from 'react';\nimport { \n  Card, \n  Progress \n} from 'antd';\n\nconst progress = {\n  display: 'flex',\n  flexDirection: 'col',\n  justifyContent: 'space-between'\n}\n\nconst circle = (day) => {\n  console.log(':::::::',  day)\n  return day\n}\n\nexport default function HabitCard({habitData}) {\n  const [dayStatus, setStatus] = React.useState(false);\n  console.log(habitData)\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    return (\n      <div className=\"site-card-border-less-wrapper\">\n        <Card title={habitData.name} bordered={true} style={{ width: 500 }}>\n          <div style={progress}>\n            {\n              days.map(day => (\n                <div onClick={()=>setStatus(true)} >\n                  <Progress type=\"circle\" percent={100} width={50} format={circle} />\n                  <p>{day}</p>\n                </div>\n              ))\n            }\n            \n            {/* <Progress type=\"circle\" percent={70} width={80} status=\"exception\" />\n            <Progress type=\"circle\" percent={100} width={80} /> */}\n          </div>\n          <p>Card content</p>\n          <p>Card content</p>\n          <p>Card content</p>\n        </Card>\n      </div>\n    )\n}\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":27,"column":10,"nodeType":"69","messageId":"70","endLine":27,"endColumn":17},{"ruleId":"67","severity":1,"message":"71","line":27,"column":19,"nodeType":"69","messageId":"70","endLine":27,"endColumn":32},{"ruleId":"67","severity":1,"message":"72","line":48,"column":18,"nodeType":"69","messageId":"70","endLine":48,"endColumn":26},{"ruleId":"67","severity":1,"message":"73","line":50,"column":28,"nodeType":"69","messageId":"70","endLine":50,"endColumn":44},{"ruleId":"67","severity":1,"message":"74","line":51,"column":9,"nodeType":"69","messageId":"70","endLine":51,"endColumn":16},{"ruleId":"67","severity":1,"message":"75","line":21,"column":26,"nodeType":"69","messageId":"70","endLine":21,"endColumn":32},{"ruleId":"67","severity":1,"message":"76","line":69,"column":15,"nodeType":"69","messageId":"70","endLine":69,"endColumn":19},{"ruleId":"67","severity":1,"message":"76","line":69,"column":15,"nodeType":"69","messageId":"70","endLine":69,"endColumn":19},{"ruleId":"67","severity":1,"message":"77","line":19,"column":10,"nodeType":"69","messageId":"70","endLine":19,"endColumn":19},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'getUser' is assigned a value but never used.","Identifier","unusedVar","'getUserResult' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'setAuthenticated' is assigned a value but never used.","'history' is assigned a value but never used.","'Footer' is assigned a value but never used.","'user' is assigned a value but never used.","'dayStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]