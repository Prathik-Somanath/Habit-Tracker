[{"/Users/rto/Desktop/Habit-Tracker/frontend/src/index.js":"1","/Users/rto/Desktop/Habit-Tracker/frontend/src/reportWebVitals.js":"2","/Users/rto/Desktop/Habit-Tracker/frontend/src/App.js":"3","/Users/rto/Desktop/Habit-Tracker/frontend/src/store.js":"4","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Home.js":"5","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Login.js":"6","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/AllHabits.js":"7","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Progress.js":"8","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/TrackHabit.js":"9","/Users/rto/Desktop/Habit-Tracker/frontend/src/query.js":"10","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/Header.js":"11","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/NewHabit.js":"12","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/HabitCard.js":"13"},{"size":500,"mtime":1607443077526,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607443077526,"results":"16","hashOfConfig":"15"},{"size":1793,"mtime":1610799961069,"results":"17","hashOfConfig":"15"},{"size":961,"mtime":1609383933376,"results":"18","hashOfConfig":"15"},{"size":3390,"mtime":1610800575019,"results":"19","hashOfConfig":"15"},{"size":14413,"mtime":1610805084511,"results":"20","hashOfConfig":"15"},{"size":1375,"mtime":1610043820995,"results":"21","hashOfConfig":"15"},{"size":1371,"mtime":1610043820996,"results":"22","hashOfConfig":"15"},{"size":2417,"mtime":1610799961070,"results":"23","hashOfConfig":"15"},{"size":473,"mtime":1610799961071,"results":"24","hashOfConfig":"15"},{"size":828,"mtime":1609383933375,"results":"25","hashOfConfig":"15"},{"size":3771,"mtime":1610799961070,"results":"26","hashOfConfig":"15"},{"size":1484,"mtime":1610799961070,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"13uy812",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"/Users/rto/Desktop/Habit-Tracker/frontend/src/index.js",[],["61","62"],"/Users/rto/Desktop/Habit-Tracker/frontend/src/reportWebVitals.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/App.js",["63","64","65","66","67"],"import React from 'react';\nimport Login from './components/Login';\nimport Home from './components/Home';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router,\n         Switch,\n         Route,\n         Redirect,\n         useHistory\n} from 'react-router-dom';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport 'antd/dist/antd.css';\nimport { StateProvider, store } from './store';\n\n//Apollo client object. Used to make requests to the graphql API.\nconst client = new ApolloClient({\n  uri: 'https://habit-tracker.hasura.app/v1/graphql',\n  cache: new InMemoryCache(),\n  headers:{\n    'x-hasura-access': process.env.REACT_APP_API_PASS,\n  },\n});\n\nfunction PrivateRoute({ children, ...rest }) {\n\n  const { state, dispatch } = React.useContext(store);\n  const sessionStore = sessionStorage.getItem('HabitTrackerUser');      // session storage user's emailID\n  const [ isAuthenticated, setAuthenticated ] = React.useState( !!state.full_name || !!sessionStore);\n  const history = useHistory();\n\n  return (\n    <Route\n      {...rest}\n      render={() =>\n        isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",       // redirect if not autheticated\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nfunction App() {\n\n  return (\n   <StateProvider>\n      <ApolloProvider client={client}>\n         <Router>\n             <Switch>\n                 <Route exact path=\"/login\">\n                     <Login />\n                 </Route>\n                 <PrivateRoute exact path=\"/\">\n                     <Home />\n                 </PrivateRoute>\n             </Switch>\n         </Router>\n      </ApolloProvider>\n   </StateProvider>\n  );\n}\n\nexport default App;","/Users/rto/Desktop/Habit-Tracker/frontend/src/store.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Home.js",["68"],"import React from 'react';\nimport { \n    Layout, \n    Menu,\n    Spin\n } from 'antd';\nimport {\n  BarChartOutlined,\n  UserOutlined,\n  FormOutlined,\n  LogoutOutlined,\n} from '@ant-design/icons';\nimport { useQuery, gql } from '@apollo/client';\nimport { BrowserRouter as Router,\n    Link,\n    Route,\n    Switch,\n    useHistory,\n} from 'react-router-dom';\nimport TrackHabit from './TrackHabit';\nimport AllHabits from './AllHabits';\nimport Progress from './Progress';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst headerStyle = {\n    fontFamily: '\"Krona One\", Sans-serif',\n    fontSize: '14pt',\n    color: '#fff',\n    textAlign: 'center'\n};\n\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst getUser = gql `\n    query getUser($email: String!){\n    users(where: {email: {_eq: $email}}) {\n      full_name\n    }\n  }\n`\n\nexport default function Home () {\n\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\n    const history = useHistory();\n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\n\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n    {   const user = data.users[0];\n        return (\n        <Router>\n        <Layout style={{height:\"100vh\"}}>\n            <Sider\n            style={{\n                overflow: 'auto',\n                height: '100vh',\n                position: 'fixed',\n                left: 0,\n            }}\n            >\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                <Header className=\"site-layout-background\" style={{ padding: 0 }} >\n                    <h1 style={headerStyle}>Habit Tracker</h1>\n                </Header>\n                <Menu.Item key=\"1\" icon={<UserOutlined />}>\n                    {user.full_name}\n                    <Link to=\"/\" />\n                </Menu.Item>\n                <Menu.Item key=\"2\" icon={<FormOutlined />}>\n                    All Habits\n                    <Link to=\"/all\" />\n                </Menu.Item>\n                <Menu.Item key=\"3\" icon={<BarChartOutlined />}>\n                    Progress\n                    <Link to=\"/progress\" />\n                </Menu.Item>\n                <Menu.Item key=\"4\" icon={<LogoutOutlined />} onClick={()=>{\n                    sessionStorage.clear();\n                    history.push('/login');\n                }}>\n                    Logout\n                </Menu.Item>\n            </Menu>\n            </Sider>\n            <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\n            <Content style={{ margin: '24px 16px 0', overflow: 'initial', flex:1, height: '100vh' }}>\n                <Switch>\n                    <Route exact path=\"/\" component={TrackHabit} />\n                    <Route exact path=\"/all\" component={AllHabits} />\n                    <Route exact path=\"/progress\" component={Progress} />\n                </Switch>\n            </Content>\n            </Layout>\n        </Layout>\n        </Router>\n        )\n    }\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Login.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/AllHabits.js",["69","70"],"import React from 'react';\nimport { \n    Spin\n } from 'antd';\nimport { store } from '../store';\nimport { useQuery, gql } from '@apollo/client';\n\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst getUser = gql `\n    query getUser($email: String!){\n    users(where: {email: {_eq: $email}}) {\n      full_name\n      createdAt\n      email\n      habits {\n        bad_habit\n        end_date\n        habit_cycle\n        name\n        id\n        remainder_note\n        reminder_times\n        start_date\n        streak\n        unit\n      }\n    }\n  }\n`\n\nexport default function AllHabits () {\n\n    //using global store with context\n    const { state } = React.useContext(store); \n\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\n    \n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\n\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n    {   const user = data.users[0];\n        return (\n        <h2>All Habits</h2>\n        )\n    }\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Progress.js",["71","72"],"import React from 'react';\nimport { \n    Spin\n } from 'antd';\nimport { store } from '../store';\nimport { useQuery, gql } from '@apollo/client';\n\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst getUser = gql `\n    query getUser($email: String!){\n    users(where: {email: {_eq: $email}}) {\n      full_name\n      createdAt\n      email\n      habits {\n        bad_habit\n        end_date\n        habit_cycle\n        name\n        id\n        remainder_note\n        reminder_times\n        start_date\n        streak\n        unit\n      }\n    }\n  }\n`\n\nexport default function Progress () {\n\n    //using global store with context\n    const { state } = React.useContext(store); \n\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\n    \n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n    {   const user = data.users[0];\n        return (\n        <h2>Progress</h2>\n        )\n    }\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/TrackHabit.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/query.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/Header.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/NewHabit.js",["73","74","75","76","77"],"import React, { useState } from 'react'\nimport { format } from 'date-fns'\nimport { \n    Typography, \n    Form, \n    DatePicker, \n    Select,\n    InputNumber,\n    Input,\n    TimePicker,\n    Button\n    } from 'antd';\nimport { gql, useMutation } from '@apollo/client'\nimport { GET_USER_DETAILS } from '../../query';\nconst { RangePicker } = DatePicker;\n\nconst headerContainer = {\n    display:'flex',\n    flexDirection:'row', \n    justifyContent:'space-between'\n}\n\nconst ADD_NEW_HABIT = gql`\n    mutation AddNewHabit($user_id: String!, $habit_name: String!, $type: habit_unit!, $note: String, $bad_habit: Boolean, $start_date: date, $end_date: date, $reps: Int) {\n        insert_habits_one(object: {\n        name: $habit_name, \n        user: $user_id, \n        start_date: $start_date, \n        remainder_note: $note, \n        unit: $type, \n        end_date: $end_date, \n        reps: $reps,\n        bad_habit: $bad_habit\n        }) {\n        id\n        }\n    }  \n`;\n\nexport default function NewHabit({ setVisible, userID }) {\n\n    const [form] = Form.useForm();\n    const [habitType, setHabitType] = useState(null);\n    const [addNewHabit, {data, error}] = useMutation(ADD_NEW_HABIT);\n\n    const onFinish = (values) => {\n        console.log('values:::::::::::::::::::', format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"))\n        addNewHabit({\n            variables: {\n                user_id: userID,\n                habit_name: values.habit_name,\n                type: values.type,\n                start_date: format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"),\n                end_date: format(new Date(values.date_range[1]._d), \"yyyy-MM-dd\"),\n                reps: values.reps_no ? values.reps_no : null\n            },\n            refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }],\n        })\n        form.resetFields();\n        setVisible(false);\n    }\n    const onFormFail = (value) => {\n        setVisible(true);\n    }\n\n    return (\n        <Form\n            labelCol={{ span: 4 }}\n            wrapperCol={{ span: 14 }}\n            layout=\"horizontal\"\n            form={form}\n            onFinish={onFinish}\n            onFinishFailed={onFormFail}\n            id='new_habit'\n        >\n            <Form.Item\n                name='habit_name'\n                label=\"Habit\"\n                rules={[{ required: true, message: \"Please input Habit's Name!\" }]}\n            >\n                <Input placeholder=\"Enter Name of the Habit\" />\n            </Form.Item>\n            <Form.Item\n                name='type'\n                label=\"Type\"\n                rules={[{ required: true, message: \"Please Select Type of Habit!\" }]}\n            >\n                <Select onChange={(type)=>setHabitType(type)} placeholder=\"Enter Type of Habit\">\n                    <Select.Option value=\"CHECK\">Yes/No</Select.Option>\n                    <Select.Option value=\"REPS\">Integer Habit(Reps)</Select.Option>\n                    <Select.Option value=\"DURATION\">Timed Habit</Select.Option>\n                    {/* <Select.Option value=\"DURATION\">Bad Habit</Select.Option> */}\n                </Select>\n            </Form.Item>\n            <Form.Item\n                name='date_range'\n                label=\"Date\"\n                rules={[{ required: true, message: \"Please Select date!\" }]}\n            >\n                <RangePicker />\n            </Form.Item>\n            { (habitType==='REPS') &&\n                <Form.Item name=\"reps_no\" label=\"Count\">\n                    <InputNumber />\n                </Form.Item>\n            }\n            { (habitType==='DURATION') &&\n                <Form.Item name=\"timer\" label=\"Timer\">\n                    <TimePicker showNow={false} />\n                </Form.Item>\n            }\n        </Form>\n    )\n}\n","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/HabitCard.js",["78","79","80"],"import React from 'react';\nimport { \n  Card, \n  Progress \n} from 'antd';\nimport { format } from 'date-fns'\n\nconst progress = {\n  display: 'flex',\n  flexDirection: 'col',\n  justifyContent: 'space-between'\n}\n\nconst circle = (day) => {\n  // console.log(':::::::',  day)\n  return day\n}\n\nexport default function HabitCard({habitData}) {\n  habitData.history.forEach((data)=>{\n    var date = data.date.split('-');\n    // console.log('history:::::::::::::',format(new Date(date), \"iii\"))\n  })\n  const [dayStatus, setStatus] = React.useState(false);\n  // console.log('habitData: ',habitData)\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    return (\n      <div className=\"site-card-border-less-wrapper\" style={{paddingRight:30, paddingBottom: 30}}>\n        <Card title={habitData.name} bordered={true} style={{ width: 500 }}>\n          <div style={progress}>\n            {\n              days.map((day, index) => (\n                <div key={index} onClick={()=>setStatus(true)} >\n                  <Progress type=\"circle\" percent={100} width={50} format={circle} key={index} />\n                  <p>{day}</p>\n                </div>\n              ))\n            }\n            \n            {/* <Progress type=\"circle\" percent={70} width={80} status=\"exception\" />\n            <Progress type=\"circle\" percent={100} width={80} /> */}\n          </div>\n          <p>Card content</p>\n          <p>Card content</p>\n          <p>Card content</p>\n        </Card>\n      </div>\n    )\n}\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":11,"column":10,"nodeType":"87","messageId":"88","endLine":11,"endColumn":13},{"ruleId":"85","severity":1,"message":"89","line":11,"column":15,"nodeType":"87","messageId":"88","endLine":11,"endColumn":27},{"ruleId":"85","severity":1,"message":"90","line":26,"column":18,"nodeType":"87","messageId":"88","endLine":26,"endColumn":26},{"ruleId":"85","severity":1,"message":"91","line":28,"column":28,"nodeType":"87","messageId":"88","endLine":28,"endColumn":44},{"ruleId":"85","severity":1,"message":"92","line":29,"column":9,"nodeType":"87","messageId":"88","endLine":29,"endColumn":16},{"ruleId":"85","severity":1,"message":"93","line":24,"column":26,"nodeType":"87","messageId":"88","endLine":24,"endColumn":32},{"ruleId":"85","severity":1,"message":"94","line":42,"column":13,"nodeType":"87","messageId":"88","endLine":42,"endColumn":18},{"ruleId":"85","severity":1,"message":"95","line":66,"column":15,"nodeType":"87","messageId":"88","endLine":66,"endColumn":19},{"ruleId":"85","severity":1,"message":"94","line":42,"column":13,"nodeType":"87","messageId":"88","endLine":42,"endColumn":18},{"ruleId":"85","severity":1,"message":"95","line":65,"column":15,"nodeType":"87","messageId":"88","endLine":65,"endColumn":19},{"ruleId":"85","severity":1,"message":"96","line":4,"column":5,"nodeType":"87","messageId":"88","endLine":4,"endColumn":15},{"ruleId":"85","severity":1,"message":"97","line":11,"column":5,"nodeType":"87","messageId":"88","endLine":11,"endColumn":11},{"ruleId":"85","severity":1,"message":"98","line":17,"column":7,"nodeType":"87","messageId":"88","endLine":17,"endColumn":22},{"ruleId":"85","severity":1,"message":"99","line":44,"column":26,"nodeType":"87","messageId":"88","endLine":44,"endColumn":30},{"ruleId":"85","severity":1,"message":"100","line":44,"column":32,"nodeType":"87","messageId":"88","endLine":44,"endColumn":37},{"ruleId":"85","severity":1,"message":"101","line":6,"column":10,"nodeType":"87","messageId":"88","endLine":6,"endColumn":16},{"ruleId":"85","severity":1,"message":"102","line":21,"column":9,"nodeType":"87","messageId":"88","endLine":21,"endColumn":13},{"ruleId":"85","severity":1,"message":"103","line":24,"column":10,"nodeType":"87","messageId":"88","endLine":24,"endColumn":19},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","'useLazyQuery' is defined but never used.","'dispatch' is assigned a value but never used.","'setAuthenticated' is assigned a value but never used.","'history' is assigned a value but never used.","'Footer' is assigned a value but never used.","'state' is assigned a value but never used.","'user' is assigned a value but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","'headerContainer' is assigned a value but never used.","'data' is assigned a value but never used.","'error' is assigned a value but never used.","'format' is defined but never used.","'date' is assigned a value but never used.","'dayStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]