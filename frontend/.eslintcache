[{"D:\\github\\Habit-Tracker\\frontend\\src\\index.js":"1","D:\\github\\Habit-Tracker\\frontend\\src\\App.js":"2","D:\\github\\Habit-Tracker\\frontend\\src\\reportWebVitals.js":"3","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Login.js":"4","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Home.js":"5","D:\\github\\Habit-Tracker\\frontend\\src\\components\\TrackHabit.js":"6","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Progress.js":"7","D:\\github\\Habit-Tracker\\frontend\\src\\components\\HabitHistory.js":"8","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\NewHabit.js":"9","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\Header.js":"10","D:\\github\\Habit-Tracker\\frontend\\src\\query.js":"11","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\HabitCard.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":1519,"mtime":1611324312070,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":14160,"mtime":1610824461553,"results":"17","hashOfConfig":"14"},{"size":3518,"mtime":1611324218031,"results":"18","hashOfConfig":"14"},{"size":3536,"mtime":1611249064545,"results":"19","hashOfConfig":"14"},{"size":4215,"mtime":1611338924249,"results":"20","hashOfConfig":"14"},{"size":3469,"mtime":1611324312072,"results":"21","hashOfConfig":"14"},{"size":6328,"mtime":1611313982902,"results":"22","hashOfConfig":"14"},{"size":861,"mtime":1611324887983,"results":"23","hashOfConfig":"14"},{"size":1925,"mtime":1611324312075,"results":"24","hashOfConfig":"14"},{"size":7137,"mtime":1611324312074,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ng3klm",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"D:\\github\\Habit-Tracker\\frontend\\src\\index.js",[],["55","56"],"D:\\github\\Habit-Tracker\\frontend\\src\\App.js",["57"],"import React from 'react';\r\nimport Login from './components/Login';\r\nimport Home from './components/Home';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\nimport { BrowserRouter as Router,\r\n         Switch,\r\n         Route,\r\n         Redirect,\r\n         useHistory\r\n} from 'react-router-dom';\r\nimport 'antd/dist/antd.css';\r\n\r\n//Apollo client object. Used to make requests to the graphql API.\r\nconst client = new ApolloClient({\r\n  uri: 'https://habit-tracker.hasura.app/v1/graphql',\r\n  cache: new InMemoryCache(),\r\n  headers:{\r\n    'x-hasura-access': process.env.REACT_APP_API_PASS,\r\n  },\r\n});\r\n\r\nfunction PrivateRoute({ children, ...rest }) {\r\n\r\n  const sessionStore = sessionStorage.getItem('HabitTrackerUser');      // session storage user's emailID\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={() =>\r\n        !!sessionStore ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",       // redirect if not autheticated\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction App() {\r\n\r\n  return (\r\n      <ApolloProvider client={client}>\r\n         <Router>\r\n             <Switch>\r\n                 <Route exact path=\"/login\">\r\n                     <Login />\r\n                 </Route>\r\n                 <PrivateRoute path=\"/\">\r\n                     <Home />\r\n                 </PrivateRoute>\r\n             </Switch>\r\n         </Router>\r\n      </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;","D:\\github\\Habit-Tracker\\frontend\\src\\reportWebVitals.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\Login.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\Home.js",["58"],"import React from 'react';\r\nimport { \r\n    Layout, \r\n    Menu,\r\n    Spin\r\n } from 'antd';\r\nimport {\r\n  BarChartOutlined,\r\n  UserOutlined,\r\n  FormOutlined,\r\n  LogoutOutlined,\r\n} from '@ant-design/icons';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { BrowserRouter as Router,\r\n    Link,\r\n    Route,\r\n    Switch,\r\n    useHistory\r\n} from 'react-router-dom';\r\nimport TrackHabit from './TrackHabit';\r\nimport Progress from './Progress';\r\nimport HabitHistory from './HabitHistory';\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nconst headerStyle = {\r\n    fontFamily: '\"Krona One\", Sans-serif',\r\n    fontSize: '14pt',\r\n    color: '#fff',\r\n    textAlign: 'center'\r\n};\r\n\r\nconst loadingStyle = {\r\n    textAlign: 'center',\r\n    flex: 1,\r\n    borderRadius: '4px',\r\n    padding: '30px 50px',\r\n    margin: '20px 0',\r\n    marginTop: '50vh'\r\n}\r\n\r\nconst getUser = gql `\r\n    query getUser($email: String!){\r\n    users(where: {email: {_eq: $email}}) {\r\n      full_name\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Home () {\r\n\r\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\r\n    const history = useHistory();\r\n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <div style={loadingStyle} >\r\n                <Spin/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        console.log(error);\r\n        return (\r\n            <div style={loadingStyle}>\r\n                <h4> Something went wrong! </h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    {   const user = data.users[0];\r\n        return (\r\n        <Router>\r\n        <Layout style={{height:\"100vh\"}}>\r\n            <Sider\r\n            style={{\r\n                overflow: 'auto',\r\n                height: '100vh',\r\n                position: 'fixed',\r\n                left: 0,\r\n            }}\r\n            >\r\n            <div className=\"logo\" />\r\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n                <Header className=\"site-layout-background\" style={{ padding: 0 }} >\r\n                    <h1 style={headerStyle}>Habit Tracker</h1>\r\n                </Header>\r\n                <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                    {user.full_name}\r\n                    <Link to=\"/\" />\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<BarChartOutlined />}>\r\n                    Progress\r\n                    <Link to=\"/all\" />\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<FormOutlined />}>\r\n                    History\r\n                    <Link to=\"/HabitHistory\" />\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" icon={<LogoutOutlined />} onClick={()=>{\r\n                    sessionStorage.clear();\r\n                    history.push();\r\n                }}>\r\n                    Logout\r\n                </Menu.Item>\r\n            </Menu>\r\n            </Sider>\r\n            <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\r\n            <Content style={{ margin: '24px 16px 0', overflow: 'initial', flex:1, height: '100vh' }}>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={TrackHabit} />\r\n                    <Route exact path=\"/all\" component={Progress} />\r\n                    <Route exact path=\"/HabitHistory\" component={HabitHistory} />\r\n                </Switch>\r\n            </Content>\r\n            </Layout>\r\n        </Layout>\r\n        </Router>\r\n        )\r\n    }\r\n}","D:\\github\\Habit-Tracker\\frontend\\src\\components\\TrackHabit.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\Progress.js",["59","60","61"],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\HabitHistory.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\NewHabit.js",["62","63","64","65","66","67","68","69","70","71","72"],"import React, { useState } from 'react'\r\nimport { format } from 'date-fns'\r\nimport moment from 'moment';\r\nimport { \r\n    Form, \r\n    DatePicker, \r\n    Select,\r\n    InputNumber,\r\n    Input,\r\n    TimePicker,\r\n    Button\r\n    } from 'antd';\r\nimport { gql, useMutation } from '@apollo/client'\r\nimport { GET_USER_DETAILS, EDIT_HABIT } from '../../query';\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst headerContainer = {\r\n    display:'flex',\r\n    flexDirection:'row',\r\n    justifyContent:'space-between'\r\n}\r\n\r\nconst ADD_NEW_HABIT = gql`\r\n    mutation AddNewHabit($user_id: String!, $habit_name: String!, $type: habit_unit!, $note: String, $bad_habit: Boolean, $start_date: date, $end_date: date, $reps: Int, $duration: Int) {\r\n        insert_habits_one(object: {\r\n        name: $habit_name, \r\n        user: $user_id, \r\n        start_date: $start_date, \r\n        remainder_note: $note, \r\n        unit: $type, \r\n        end_date: $end_date, \r\n        reps: $reps,\r\n        duration: $duration\r\n        bad_habit: $bad_habit\r\n        }) {\r\n        id\r\n        }\r\n    }\r\n`;\r\n\r\nconst disabledDate = current => {\r\n    return current && current < moment().subtract(1, 'days');\r\n  }\r\n\r\nexport default function NewHabit({ setVisible, userID, editHabitDate }) {\r\n\r\n    const [form] = Form.useForm();\r\n    React.useEffect(()=>{\r\n        form.resetFields();\r\n    },[editHabitDate])\r\n    const [habitType, setHabitType] = useState(null);\r\n    const [addNewHabit, {data, error}] = useMutation(ADD_NEW_HABIT);\r\n    const [editHabit] = useMutation(EDIT_HABIT);\r\n    const onFinish = (values) => {\r\n        console.log('values:::::::::::::::::::', format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"))\r\n        {(editHabitDate)\r\n        ? editHabit({\r\n            variables: {\r\n                id: editHabitDate.id,\r\n                user_id: userID,\r\n                habit_name: values.habit_name,\r\n                type: values.type,\r\n                start_date: format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"),\r\n                end_date: format(new Date(values.date_range[1]._d), \"yyyy-MM-dd\"),\r\n                reps: values.reps_no ? values.reps_no : null,\r\n                note: values.note ? values.note : null,\r\n                duration: values.duration ? values.duration : null\r\n            },\r\n            refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }],\r\n        })\r\n        : addNewHabit({\r\n            variables: {\r\n                user_id: userID,\r\n                habit_name: values.habit_name,\r\n                type: values.type,\r\n                start_date: format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"),\r\n                end_date: format(new Date(values.date_range[1]._d), \"yyyy-MM-dd\"),\r\n                reps: values.reps_no ? values.reps_no : null,\r\n                note: values.note ? values.note : null,\r\n                duration: values.duration ? values.duration : null\r\n            },\r\n            refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }],\r\n        })}\r\n        form.resetFields();\r\n        setVisible(false);\r\n    }\r\n    const onFormFail = (value) => {\r\n        setVisible(true);\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            labelCol={{ span: 6 }}\r\n            wrapperCol={{ span: 14 }}\r\n            layout=\"horizontal\"\r\n            form={form}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFormFail}\r\n            id='new_habit'\r\n        >\r\n            <Form.Item\r\n                name='habit_name'\r\n                label=\"Habit\"\r\n                rules={[{ required: true, message: \"Please input Habit's Name!\" }]}\r\n                initialValue={!!editHabitDate ? editHabitDate.name : \"\"}\r\n            >\r\n                <Input placeholder=\"Enter Name of the Habit\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n                name='type'\r\n                label=\"Type\"\r\n                rules={[{ required: true, message: \"Please Select Type of Habit!\" }]}\r\n                initialValue={editHabitDate ? editHabitDate.unit : \"\"}\r\n            >\r\n                <Select onChange={(type)=>setHabitType(type)} placeholder=\"Enter Type of Habit\">\r\n                    <Select.Option value=\"CHECK\">Yes/No</Select.Option>\r\n                    <Select.Option value=\"REPS\">Integer Habit(Reps)</Select.Option>\r\n                    <Select.Option value=\"DURATION\">Timed Habit</Select.Option>\r\n                    {/* <Select.Option value=\"DURATION\">Bad Habit</Select.Option> */}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name='date_range'\r\n                label=\"Date\"\r\n                rules={[{ required: true, message: \"Please Select date!\" }]}\r\n                initialValue={editHabitDate ? [moment(editHabitDate.start_date), moment(editHabitDate.end_date)] : \"\"}\r\n            >\r\n                <RangePicker disabledDate={disabledDate} />\r\n            </Form.Item>\r\n            { (habitType === 'REPS' || editHabitDate && editHabitDate.unit === 'REPS') &&\r\n                <Form.Item \r\n                    name=\"reps_no\" \r\n                    label=\"Count\"\r\n                    rules={[{ required: true, message: \"Please Select Reps no.!\" }]}\r\n                    initialValue={editHabitDate ? editHabitDate.reps : \"\"}\r\n                >\r\n                    <InputNumber min={1}/>\r\n                </Form.Item>\r\n            }\r\n            { (habitType === 'DURATION' || editHabitDate && (editHabitDate.unit === 'DURATION')) &&\r\n                <Form.Item \r\n                    name=\"duration\" \r\n                    label=\"Duration(mins)\"\r\n                    rules={[{ required: true, message: \"Please Select Duration!\" }]}\r\n                    initialValue={editHabitDate ? editHabitDate.duration : \"\"}\r\n                >\r\n                    <InputNumber min={1}/>\r\n                </Form.Item>\r\n            }\r\n            <Form.Item\r\n                name='note'\r\n                label=\"Note\"\r\n                // rules={[{ required: true, message: \"Please input Habit's Name!\" }]}\r\n                initialValue={editHabitDate ? editHabitDate.remainder_note : \"\"}\r\n            >\r\n                <Input placeholder=\"Enter Note for the Habit\" defaultValue={editHabitDate ? editHabitDate.remainder_note : \"\"} />\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\Header.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\query.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\HabitCard.js",["73"],"import React from 'react';\r\nimport { \r\n  Card, \r\n  Progress,\r\n  Button,\r\n  InputNumber\r\n} from 'antd';\r\nimport { getDay, sub, isBefore, differenceInCalendarDays } from 'date-fns';\r\nimport { ArrowsAltOutlined } from '@ant-design/icons';\r\nimport { useMutation } from '@apollo/client'\r\nimport { FINISH_HABIT, GET_USER_DETAILS, EDIT_HISTORY } from '../../query';\r\nimport { format } from 'date-fns'\r\n\r\nconst progress = {\r\n  display: 'flex',\r\n  flexDirection: 'col',\r\n  justifyContent: 'space-between'\r\n}\r\n\r\nconst valEdit = (val,unit,reps,dur) =>{\r\n  switch(unit){\r\n    case 'CHECK':  val = (val===1? 100 : 0);\r\n                   break;\r\n    case 'REPS': val = (val/reps)*100;    \r\n                  break;\r\n    default: val = (val/dur)*100;\r\n                  break;             \r\n  }\r\n  return val;\r\n};\r\n\r\nexport default function HabitCard({habitData, setEditData, showModal}) {\r\n  console.log('Habitdata::::::',habitData.history[0]);\r\n  const userID = sessionStorage.getItem('HabitTrackerUser');\r\n  const [ finishHabit ] = useMutation(FINISH_HABIT);\r\n  const [ editHabit ] = useMutation(EDIT_HISTORY);\r\n  const curDate = !!(habitData.history[0] && (habitData.history[0].date)===format(new Date(), \"yyyy-MM-dd\")); //boolean\r\n  const goalCount = (habitData.reps) ? habitData.reps : habitData.duration;\r\n  const days = ['Sun','Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const card_data = [];\r\n  let day_pointer = new Date();\r\n  const day_limit = sub(day_pointer,{days:7});\r\n  habitData.history.forEach(ele => {\r\n    let info = {};\r\n    const record = new Date(ele.date);\r\n    if(!isBefore(record,day_limit)){\r\n      for(let i=0;i<differenceInCalendarDays(day_pointer,record);i++){\r\n        let dead_day = { val: 0 };\r\n        dead_day.day_index = getDay(day_pointer);\r\n        card_data.push(dead_day);\r\n        day_pointer = sub(day_pointer,{days:1});\r\n      }\r\n      info.day_index = getDay(record);\r\n      info.val = valEdit(ele.val,habitData.unit,habitData.reps,habitData.duration);\r\n      card_data.push(info);\r\n      day_pointer = sub(day_pointer,{days:1});\r\n    }\r\n  });\r\n  for(let i=card_data.length;i<days.length;i++){\r\n    let info = {\r\n      day_index: getDay(day_pointer),\r\n    };\r\n    if(isBefore(day_pointer,new Date(habitData.start_date)))\r\n      info.val = -1;\r\n    else\r\n      info.val = 0; \r\n    card_data.push(info);\r\n    day_pointer = sub(day_pointer,{days:1});   \r\n  }\r\n\r\n  const circle = (val) => {\r\n    if(habitData.unit === 'REPS')\r\n      return `${(val/100)*habitData.reps}/${habitData.reps}`;\r\n    else if(habitData.unit === 'DURATION')\r\n      return `${(val/100)*habitData.duration}/${habitData.duration} min`;\r\n    else\r\n      return val;\r\n  }  \r\n\r\n  const checkClicked = () => {\r\n    console.log('clicked');\r\n    finishHabit({\r\n      variables: {\r\n        id: habitData.id,\r\n        user: userID,\r\n        val: 1,\r\n        date: format(new Date(), \"yyyy-MM-dd\")\r\n      },\r\n      refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }]\r\n    })\r\n  }\r\n\r\n  const increaseCount = (val) => {\r\n    // console.log('clicked:', val, curDate)\r\n    (curDate)\r\n    ? \r\n      !!val && editHabit({\r\n        variables: {\r\n          id: habitData.history[0].id,\r\n          val: val\r\n        },\r\n        refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }]\r\n      })\r\n    :\r\n      !!val && finishHabit({\r\n        variables: {\r\n          id: habitData.id,\r\n          user: userID,\r\n          val: val,\r\n          date: format(new Date(), \"yyyy-MM-dd\")\r\n        },\r\n        refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }]\r\n      })\r\n  }\r\n\r\n  console.log('card data:',card_data, habitData);\r\n    \r\n    return (\r\n      <div className=\"site-card-border-less-wrapper\" style={{paddingRight:30, paddingBottom: 30}}>\r\n        <Card \r\n          hoverable\r\n          title={habitData.name}\r\n          headStyle={{fontSize:20, fontWeight:'bold'}}\r\n          extra={\r\n            <ArrowsAltOutlined \r\n              onClick={ () => {\r\n                setEditData(habitData);\r\n                showModal();\r\n              }} \r\n              style={{ fontSize: 25 }} \r\n            />\r\n          } \r\n          bordered={true} \r\n          style={{ width: 500 }}\r\n        >\r\n          { (habitData.unit ==='CHECK')\r\n            ?\r\n              <Button \r\n                style={{position:'absolute', left:30}}\r\n                onClick={()=>checkClicked()}\r\n                disabled={curDate}\r\n              > \r\n                {curDate ? \"Completed\" : \"Done\" }\r\n              </Button>\r\n            :\r\n              <InputNumber \r\n                style={{position:'absolute', left:30}} \r\n                min={0}\r\n                max={goalCount}\r\n                disabled={curDate && (habitData.history[0].val===goalCount)}\r\n                onChange={increaseCount}\r\n                defaultValue={curDate ? habitData.history[0].val : null}\r\n                formatter={value=> (value==goalCount) ?  `Completed`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : value}\r\n                // parser={value => value.replace('Completed', '')}\r\n                // formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n                placeholder={(habitData.unit==='REPS') ? \"Reps\" : \"Mins\"}\r\n              />\r\n          }\r\n          <p style={{ position:'relative', left:150, paddingBottom:10 }} > \r\n            {(habitData.unit!=='CHECK')\r\n              ? (habitData.reps) \r\n                ? `Habit Goal: ${habitData.reps} reps/day` \r\n                : `Habit Goal: ${habitData.duration} mins/day` \r\n              : 'Habit Goal: Yes/No'\r\n            } \r\n          </p>\r\n          <div style={progress}>\r\n            {\r\n              card_data.map((info,index)=>(\r\n                <div key={index} >\r\n                  {\r\n                    index === 0 && info.val === 0 ? (\r\n                      <Progress type=\"circle\" trailColor=\"#ffb95a\" percent={0} width={50}  format={()=>\"-\"} key={index} onClick={()=> (habitData.unit==='CHECK') && checkClicked()} />\r\n                    ):(\r\n                      info.val===0 || info.val===100 ? (\r\n                        <Progress type=\"circle\" percent={info.val} width={50} status={info.val === 0 ? 'exception':'success'} key={index} />\r\n                      ):( info.val === -1 ? (\r\n                        <Progress trailColor=\"#808080\" type=\"circle\" percent={0} width={50} format={()=>\"-\"} key={index} />\r\n                      ):(\r\n                        <Progress type=\"circle\" percent={info.val} width={50} format={circle} key={index} />\r\n                      )\r\n                      )\r\n                    )\r\n                  }\r\n                  <p>{days[info.day_index]}</p>\r\n                </div>\r\n              ))\r\n            }\r\n            \r\n            {/* <Progress type=\"circle\" percent={70} width={80} status=\"exception\" />\r\n            <Progress type=\"circle\" percent={100} width={80} /> */}\r\n          </div>\r\n          <p style={{marginTop:15}}>Remainder note: {habitData.remainder_note}</p>\r\n        </Card>\r\n      </div>\r\n    )\r\n}\r\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":9,"column":10,"nodeType":"80","messageId":"81","endLine":9,"endColumn":20},{"ruleId":"78","severity":1,"message":"82","line":24,"column":26,"nodeType":"80","messageId":"81","endLine":24,"endColumn":32},{"ruleId":"78","severity":1,"message":"83","line":22,"column":7,"nodeType":"80","messageId":"81","endLine":22,"endColumn":21},{"ruleId":"78","severity":1,"message":"84","line":56,"column":23,"nodeType":"80","messageId":"81","endLine":56,"endColumn":35},{"ruleId":"85","severity":1,"message":"86","line":94,"column":5,"nodeType":"87","messageId":"88","endLine":141,"endColumn":6},{"ruleId":"78","severity":1,"message":"89","line":10,"column":5,"nodeType":"80","messageId":"81","endLine":10,"endColumn":15},{"ruleId":"78","severity":1,"message":"90","line":11,"column":5,"nodeType":"80","messageId":"81","endLine":11,"endColumn":11},{"ruleId":"78","severity":1,"message":"91","line":17,"column":7,"nodeType":"80","messageId":"81","endLine":17,"endColumn":22},{"ruleId":"92","severity":1,"message":"93","line":50,"column":7,"nodeType":"94","endLine":50,"endColumn":22,"suggestions":"95"},{"ruleId":"78","severity":1,"message":"96","line":52,"column":26,"nodeType":"80","messageId":"81","endLine":52,"endColumn":30},{"ruleId":"78","severity":1,"message":"97","line":52,"column":32,"nodeType":"80","messageId":"81","endLine":52,"endColumn":37},{"ruleId":"85","severity":1,"message":"86","line":56,"column":9,"nodeType":"87","messageId":"88","endLine":83,"endColumn":12},{"ruleId":"98","severity":1,"message":"99","line":130,"column":37,"nodeType":"100","messageId":"101","endLine":130,"endColumn":39},{"ruleId":"98","severity":1,"message":"99","line":130,"column":54,"nodeType":"100","messageId":"101","endLine":130,"endColumn":56},{"ruleId":"98","severity":1,"message":"99","line":140,"column":41,"nodeType":"100","messageId":"101","endLine":140,"endColumn":43},{"ruleId":"98","severity":1,"message":"99","line":140,"column":58,"nodeType":"100","messageId":"101","endLine":140,"endColumn":60},{"ruleId":"102","severity":1,"message":"103","line":153,"column":42,"nodeType":"104","messageId":"105","endLine":153,"endColumn":44},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'Footer' is assigned a value but never used.","'GET_HABIT_DATE' is assigned a value but never used.","'setDateRange' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'TimePicker' is defined but never used.","'Button' is defined but never used.","'headerContainer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'data' is assigned a value but never used.","'error' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [editHabitDate, form]",{"range":"111","text":"112"},[1348,1363],"[editHabitDate, form]"]