[{"/Users/rto/Desktop/Habit-Tracker/frontend/src/index.js":"1","/Users/rto/Desktop/Habit-Tracker/frontend/src/App.js":"2","/Users/rto/Desktop/Habit-Tracker/frontend/src/reportWebVitals.js":"3","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Login.js":"4","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Home.js":"5","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/TrackHabit.js":"6","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/HabitHistory.js":"7","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Progress.js":"8","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/Header.js":"9","/Users/rto/Desktop/Habit-Tracker/frontend/src/query.js":"10","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/HabitCard.js":"11","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/NewHabit.js":"12"},{"size":500,"mtime":1607443077526,"results":"13","hashOfConfig":"14"},{"size":1458,"mtime":1611323173218,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1607443077526,"results":"16","hashOfConfig":"14"},{"size":13818,"mtime":1611326571277,"results":"17","hashOfConfig":"14"},{"size":3395,"mtime":1611321281890,"results":"18","hashOfConfig":"14"},{"size":3429,"mtime":1611249093480,"results":"19","hashOfConfig":"14"},{"size":3338,"mtime":1611324183986,"results":"20","hashOfConfig":"14"},{"size":1356,"mtime":1611321281890,"results":"21","hashOfConfig":"14"},{"size":828,"mtime":1611325934224,"results":"22","hashOfConfig":"14"},{"size":1851,"mtime":1611322451259,"results":"23","hashOfConfig":"14"},{"size":7037,"mtime":1611326472113,"results":"24","hashOfConfig":"14"},{"size":6168,"mtime":1611321281891,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"13uy812",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"/Users/rto/Desktop/Habit-Tracker/frontend/src/index.js",[],["55","56"],"/Users/rto/Desktop/Habit-Tracker/frontend/src/App.js",["57"],"import React from 'react';\nimport Login from './components/Login';\nimport Home from './components/Home';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router,\n         Switch,\n         Route,\n         Redirect,\n         useHistory\n} from 'react-router-dom';\nimport 'antd/dist/antd.css';\n\n//Apollo client object. Used to make requests to the graphql API.\nconst client = new ApolloClient({\n  uri: 'https://habit-tracker.hasura.app/v1/graphql',\n  cache: new InMemoryCache(),\n  headers:{\n    'x-hasura-access': process.env.REACT_APP_API_PASS,\n  },\n});\n\nfunction PrivateRoute({ children, ...rest }) {\n\n  const sessionStore = sessionStorage.getItem('HabitTrackerUser');      // session storage user's emailID\n\n  return (\n    <Route\n      {...rest}\n      render={() =>\n        !!sessionStore ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",       // redirect if not autheticated\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nfunction App() {\n\n  return (\n      <ApolloProvider client={client}>\n         <Router>\n             <Switch>\n                 <Route exact path=\"/login\">\n                     <Login />\n                 </Route>\n                 <PrivateRoute path=\"/\">\n                     <Home />\n                 </PrivateRoute>\n             </Switch>\n         </Router>\n      </ApolloProvider>\n  );\n}\n\nexport default App;","/Users/rto/Desktop/Habit-Tracker/frontend/src/reportWebVitals.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Login.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Home.js",["58"],"import React from 'react';\nimport { \n    Layout, \n    Menu,\n    Spin\n } from 'antd';\nimport {\n  BarChartOutlined,\n  UserOutlined,\n  FormOutlined,\n  LogoutOutlined,\n} from '@ant-design/icons';\nimport { useQuery, gql } from '@apollo/client';\nimport { BrowserRouter as Router,\n    Link,\n    Route,\n    Switch,\n    useHistory\n} from 'react-router-dom';\nimport TrackHabit from './TrackHabit';\nimport Progress from './Progress';\nimport HabitHistory from './HabitHistory';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst headerStyle = {\n    fontFamily: '\"Krona One\", Sans-serif',\n    fontSize: '14pt',\n    color: '#fff',\n    textAlign: 'center'\n};\n\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst getUser = gql `\n    query getUser($email: String!){\n    users(where: {email: {_eq: $email}}) {\n      full_name\n    }\n  }\n`\n\nexport default function Home () {\n\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\n    const history = useHistory();\n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\n\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n    {   const user = data.users[0];\n        return (\n        <Router>\n        <Layout style={{height:\"100vh\"}}>\n            <Sider\n            style={{\n                overflow: 'auto',\n                height: '100vh',\n                position: 'fixed',\n                left: 0,\n            }}\n            >\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                <Header className=\"site-layout-background\" style={{ padding: 0 }} >\n                    <h1 style={headerStyle}>Habit Tracker</h1>\n                </Header>\n                <Menu.Item key=\"1\" icon={<UserOutlined />}>\n                    {user.full_name}\n                    <Link to=\"/\" />\n                </Menu.Item>\n                <Menu.Item key=\"2\" icon={<BarChartOutlined />}>\n                    Progress\n                    <Link to=\"/all\" />\n                </Menu.Item>\n                <Menu.Item key=\"3\" icon={<FormOutlined />}>\n                    History\n                    <Link to=\"/HabitHistory\" />\n                </Menu.Item>\n                <Menu.Item key=\"4\" icon={<LogoutOutlined />} onClick={()=>{\n                    sessionStorage.clear();\n                    history.push();\n                }}>\n                    Logout\n                </Menu.Item>\n            </Menu>\n            </Sider>\n            <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\n            <Content style={{ margin: '24px 16px 0', overflow: 'initial', flex:1, height: '100vh' }}>\n                <Switch>\n                    <Route exact path=\"/\" component={TrackHabit} />\n                    <Route exact path=\"/all\" component={Progress} />\n                    <Route exact path=\"/HabitHistory\" component={HabitHistory} />\n                </Switch>\n            </Content>\n            </Layout>\n        </Layout>\n        </Router>\n        )\n    }\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/TrackHabit.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/HabitHistory.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Progress.js",["59"],"import React from 'react';\nimport { \n    Spin\n } from 'antd';\nimport { useQuery, gql } from '@apollo/client';\n\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst getUser = gql `\n    query getUser($email: String!){\n    users(where: {email: {_eq: $email}}) {\n      full_name\n      createdAt\n      email\n      habits {\n        bad_habit\n        end_date\n        habit_cycle\n        name\n        id\n        remainder_note\n        reminder_times\n        start_date\n        streak\n        unit\n      }\n    }\n  }\n`\n\nexport default function AllHabits () {\n\n    //using global store with context\n\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\n    console.log(sessionStore)\n    \n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\n\n    console.log('data : ', data)\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n    {   const user = data.users[0];\n        return (\n        <h2>All Habits</h2>\n        )\n    }\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/Header.js",["60","61"],"/Users/rto/Desktop/Habit-Tracker/frontend/src/query.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/HabitCard.js",["62"],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/NewHabit.js",["63","64","65","66","67","68","69","70","71","72","73"],"import React, { useState } from 'react'\nimport { format } from 'date-fns'\nimport moment from 'moment';\nimport { \n    Form, \n    DatePicker, \n    Select,\n    InputNumber,\n    Input,\n    TimePicker,\n    Button\n    } from 'antd';\nimport { gql, useMutation } from '@apollo/client'\nimport { GET_USER_DETAILS, EDIT_HABIT } from '../../query';\nconst { RangePicker } = DatePicker;\n\nconst headerContainer = {\n    display:'flex',\n    flexDirection:'row',\n    justifyContent:'space-between'\n}\n\nconst ADD_NEW_HABIT = gql`\n    mutation AddNewHabit($user_id: String!, $habit_name: String!, $type: habit_unit!, $note: String, $bad_habit: Boolean, $start_date: date, $end_date: date, $reps: Int, $duration: Int) {\n        insert_habits_one(object: {\n        name: $habit_name, \n        user: $user_id, \n        start_date: $start_date, \n        remainder_note: $note, \n        unit: $type, \n        end_date: $end_date, \n        reps: $reps,\n        duration: $duration\n        bad_habit: $bad_habit\n        }) {\n        id\n        }\n    }\n`;\n\nconst disabledDate = current => {\n    return current && current < moment().subtract(1, 'days');\n  }\n\nexport default function NewHabit({ setVisible, userID, editHabitDate }) {\n\n    const [form] = Form.useForm();\n    React.useEffect(()=>{\n        form.resetFields();\n    },[editHabitDate])\n    const [habitType, setHabitType] = useState(null);\n    const [addNewHabit, {data, error}] = useMutation(ADD_NEW_HABIT);\n    const [editHabit] = useMutation(EDIT_HABIT);\n    const onFinish = (values) => {\n        console.log('values:::::::::::::::::::', format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"))\n        {(editHabitDate)\n        ? editHabit({\n            variables: {\n                id: editHabitDate.id,\n                user_id: userID,\n                habit_name: values.habit_name,\n                type: values.type,\n                start_date: format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"),\n                end_date: format(new Date(values.date_range[1]._d), \"yyyy-MM-dd\"),\n                reps: values.reps_no ? values.reps_no : null,\n                note: values.note ? values.note : null,\n                duration: values.duration ? values.duration : null\n            },\n            refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }],\n        })\n        : addNewHabit({\n            variables: {\n                user_id: userID,\n                habit_name: values.habit_name,\n                type: values.type,\n                start_date: format(new Date(values.date_range[0]._d), \"yyyy-MM-dd\"),\n                end_date: format(new Date(values.date_range[1]._d), \"yyyy-MM-dd\"),\n                reps: values.reps_no ? values.reps_no : null,\n                note: values.note ? values.note : null,\n                duration: values.duration ? values.duration : null\n            },\n            refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }],\n        })}\n        form.resetFields();\n        setVisible(false);\n    }\n    const onFormFail = (value) => {\n        setVisible(true);\n    }\n\n    return (\n        <Form\n            labelCol={{ span: 6 }}\n            wrapperCol={{ span: 14 }}\n            layout=\"horizontal\"\n            form={form}\n            onFinish={onFinish}\n            onFinishFailed={onFormFail}\n            id='new_habit'\n        >\n            <Form.Item\n                name='habit_name'\n                label=\"Habit\"\n                rules={[{ required: true, message: \"Please input Habit's Name!\" }]}\n                initialValue={!!editHabitDate ? editHabitDate.name : \"\"}\n            >\n                <Input placeholder=\"Enter Name of the Habit\" />\n            </Form.Item>\n            <Form.Item\n                name='type'\n                label=\"Type\"\n                rules={[{ required: true, message: \"Please Select Type of Habit!\" }]}\n                initialValue={editHabitDate ? editHabitDate.unit : \"\"}\n            >\n                <Select onChange={(type)=>setHabitType(type)} placeholder=\"Enter Type of Habit\">\n                    <Select.Option value=\"CHECK\">Yes/No</Select.Option>\n                    <Select.Option value=\"REPS\">Integer Habit(Reps)</Select.Option>\n                    <Select.Option value=\"DURATION\">Timed Habit</Select.Option>\n                    {/* <Select.Option value=\"DURATION\">Bad Habit</Select.Option> */}\n                </Select>\n            </Form.Item>\n            <Form.Item\n                name='date_range'\n                label=\"Date\"\n                rules={[{ required: true, message: \"Please Select date!\" }]}\n                initialValue={editHabitDate ? [moment(editHabitDate.start_date), moment(editHabitDate.end_date)] : \"\"}\n            >\n                <RangePicker disabledDate={disabledDate} />\n            </Form.Item>\n            { (habitType === 'REPS' || editHabitDate && editHabitDate.unit === 'REPS') &&\n                <Form.Item \n                    name=\"reps_no\" \n                    label=\"Count\"\n                    rules={[{ required: true, message: \"Please Select Reps no.!\" }]}\n                    initialValue={editHabitDate ? editHabitDate.reps : \"\"}\n                >\n                    <InputNumber min={1}/>\n                </Form.Item>\n            }\n            { (habitType === 'DURATION' || editHabitDate && (editHabitDate.unit === 'DURATION')) &&\n                <Form.Item \n                    name=\"duration\" \n                    label=\"Duration(mins)\"\n                    rules={[{ required: true, message: \"Please Select Duration!\" }]}\n                    initialValue={editHabitDate ? editHabitDate.duration : \"\"}\n                >\n                    <InputNumber min={1}/>\n                </Form.Item>\n            }\n            <Form.Item\n                name='note'\n                label=\"Note\"\n                // rules={[{ required: true, message: \"Please input Habit's Name!\" }]}\n                initialValue={editHabitDate ? editHabitDate.remainder_note : \"\"}\n            >\n                <Input placeholder=\"Enter Note for the Habit\" defaultValue={editHabitDate ? editHabitDate.remainder_note : \"\"} />\n            </Form.Item>\n        </Form>\n    )\n}\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":9,"column":10,"nodeType":"80","messageId":"81","endLine":9,"endColumn":20},{"ruleId":"78","severity":1,"message":"82","line":24,"column":26,"nodeType":"80","messageId":"81","endLine":24,"endColumn":32},{"ruleId":"78","severity":1,"message":"83","line":66,"column":15,"nodeType":"80","messageId":"81","endLine":66,"endColumn":19},{"ruleId":"78","severity":1,"message":"84","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":26},{"ruleId":"78","severity":1,"message":"85","line":13,"column":7,"nodeType":"80","messageId":"81","endLine":13,"endColumn":15},{"ruleId":"86","severity":1,"message":"87","line":153,"column":42,"nodeType":"88","messageId":"89","endLine":153,"endColumn":44},{"ruleId":"78","severity":1,"message":"90","line":10,"column":5,"nodeType":"80","messageId":"81","endLine":10,"endColumn":15},{"ruleId":"78","severity":1,"message":"91","line":11,"column":5,"nodeType":"80","messageId":"81","endLine":11,"endColumn":11},{"ruleId":"78","severity":1,"message":"92","line":17,"column":7,"nodeType":"80","messageId":"81","endLine":17,"endColumn":22},{"ruleId":"93","severity":1,"message":"94","line":50,"column":7,"nodeType":"95","endLine":50,"endColumn":22,"suggestions":"96"},{"ruleId":"78","severity":1,"message":"97","line":52,"column":26,"nodeType":"80","messageId":"81","endLine":52,"endColumn":30},{"ruleId":"78","severity":1,"message":"98","line":52,"column":32,"nodeType":"80","messageId":"81","endLine":52,"endColumn":37},{"ruleId":"99","severity":1,"message":"100","line":56,"column":9,"nodeType":"101","messageId":"102","endLine":83,"endColumn":12},{"ruleId":"103","severity":1,"message":"104","line":130,"column":37,"nodeType":"105","messageId":"106","endLine":130,"endColumn":39},{"ruleId":"103","severity":1,"message":"104","line":130,"column":54,"nodeType":"105","messageId":"106","endLine":130,"endColumn":56},{"ruleId":"103","severity":1,"message":"104","line":140,"column":41,"nodeType":"105","messageId":"106","endLine":140,"endColumn":43},{"ruleId":"103","severity":1,"message":"104","line":140,"column":58,"nodeType":"105","messageId":"106","endLine":140,"endColumn":60},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'Footer' is assigned a value but never used.","'user' is assigned a value but never used.","'CalendarOutlined' is defined but never used.","'calendar' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'TimePicker' is defined but never used.","'Button' is defined but never used.","'headerContainer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","ArrayExpression",["109"],"'data' is assigned a value but never used.","'error' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},"Update the dependencies array to be: [editHabitDate, form]",{"range":"112","text":"113"},[1299,1314],"[editHabitDate, form]"]