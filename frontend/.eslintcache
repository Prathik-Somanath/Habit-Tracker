[{"/Users/rto/Desktop/Habit-Tracker/frontend/src/index.js":"1","/Users/rto/Desktop/Habit-Tracker/frontend/src/reportWebVitals.js":"2","/Users/rto/Desktop/Habit-Tracker/frontend/src/App.js":"3","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Home.js":"4","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Login.js":"5","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/TrackHabit.js":"6","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/HabitHistory.js":"7","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Progress.js":"8","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/Header.js":"9","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/NewHabit.js":"10","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/HabitCard.js":"11","/Users/rto/Desktop/Habit-Tracker/frontend/src/query.js":"12"},{"size":500,"mtime":1607443077526,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1607443077526,"results":"15","hashOfConfig":"14"},{"size":1483,"mtime":1611767336955,"results":"16","hashOfConfig":"14"},{"size":3582,"mtime":1611771616660,"results":"17","hashOfConfig":"14"},{"size":13914,"mtime":1611746973962,"results":"18","hashOfConfig":"14"},{"size":3459,"mtime":1611774466892,"results":"19","hashOfConfig":"14"},{"size":3105,"mtime":1611770307603,"results":"20","hashOfConfig":"14"},{"size":6401,"mtime":1611770722487,"results":"21","hashOfConfig":"14"},{"size":828,"mtime":1611325934224,"results":"22","hashOfConfig":"14"},{"size":6368,"mtime":1611776458862,"results":"23","hashOfConfig":"14"},{"size":6990,"mtime":1611773879365,"results":"24","hashOfConfig":"14"},{"size":1890,"mtime":1611768656193,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"13uy812",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/rto/Desktop/Habit-Tracker/frontend/src/index.js",[],["55","56"],"/Users/rto/Desktop/Habit-Tracker/frontend/src/reportWebVitals.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/App.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Home.js",["57"],"import React from 'react';\nimport { \n    Layout, \n    Menu,\n    Spin\n } from 'antd';\nimport {\n  BarChartOutlined,\n  UserOutlined,\n  FormOutlined,\n  LogoutOutlined,\n} from '@ant-design/icons';\nimport { useQuery, gql } from '@apollo/client';\nimport { BrowserRouter as Router,\n    Link,\n    Route,\n    Switch,\n    useHistory,\n    useLocation\n} from 'react-router-dom';\nimport TrackHabit from './TrackHabit';\nimport Progress from './Progress';\nimport HabitHistory from './HabitHistory';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst headerStyle = {\n    fontFamily: '\"Krona One\", Sans-serif',\n    fontSize: '14pt',\n    color: '#fff',\n    textAlign: 'center'\n};\n\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst getUser = gql `\n    query getUser($email: String!){\n    users(where: {email: {_eq: $email}}) {\n      full_name\n    }\n  }\n`\n\nexport default function Home () {\n\n    const sessionStore = sessionStorage.getItem('HabitTrackerUser');\n    const history = useHistory();\n    const location = useLocation();\n    const path = location.pathname.split('/');\n    const defaultKey = (path.length > 1)?path[path.length-1]:\"1\"; \n    const { loading, error, data } = useQuery( getUser, { variables: {email:sessionStore} } );\n\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n    {   const user = data.users[0];\n        return (\n        <Router>\n        <Layout style={{height:\"100vh\"}}>\n            <Sider\n            style={{\n                overflow: 'auto',\n                height: '100vh',\n                position: 'fixed',\n                left: 0,\n            }}\n            >\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[defaultKey]}>\n                <Header className=\"site-layout-background\" style={{ padding: 0 }} >\n                    <h1 style={headerStyle}>Habit Tracker</h1>\n                </Header>\n                <Menu.Item key=\"1\" icon={<UserOutlined />}>\n                    {user.full_name}\n                    <Link to=\"/\" />\n                </Menu.Item>\n                <Menu.Item key=\"all\" icon={<BarChartOutlined />}>\n                    Progress\n                    <Link to=\"/all\" />\n                </Menu.Item>\n                <Menu.Item key=\"HabitHistory\" icon={<FormOutlined />}>\n                    History\n                    <Link to=\"/HabitHistory\" />\n                </Menu.Item>\n                <Menu.Item key=\"4\" icon={<LogoutOutlined />} onClick={()=>{\n                    sessionStorage.clear();\n                    history.push();\n                }}>\n                    Logout\n                </Menu.Item>\n            </Menu>\n            </Sider>\n            <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\n            <Content style={{ margin: '24px 16px 0', overflow: 'initial', flex:1, height: '100vh' }}>\n                <Switch>\n                    <Route exact path=\"/\" component={TrackHabit} />\n                    <Route exact path=\"/all\" component={Progress} />\n                    <Route exact path=\"/HabitHistory\" component={HabitHistory} />\n                </Switch>\n            </Content>\n            </Layout>\n        </Layout>\n        </Router>\n        )\n    }\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Login.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/TrackHabit.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/HabitHistory.js",[],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/Progress.js",["58","59"],"import React from 'react';\nimport { \n    Spin,\n    Select,\n    Row,\n    Col\n} from 'antd';\nimport { useQuery, gql } from '@apollo/client';\nimport CalendarHeatmap from 'react-calendar-heatmap';\nimport 'react-calendar-heatmap/dist/styles.css';\nimport ReactTooltip from 'react-tooltip';\nimport { addDays, format, isBefore, subMonths } from 'date-fns'\n\nconst { Option } = Select;\nconst loadingStyle = {\n    textAlign: 'center',\n    flex: 1,\n    borderRadius: '4px',\n    padding: '30px 50px',\n    margin: '20px 0',\n    marginTop: '50vh'\n}\n\nconst GET_HABIT_DATE = gql `\n    query GetHabitDate($id: uuid!) {\n        habits(where: {id: {_eq: $id}}){\n        history{\n            date\n        }\n        }\n    }  \n`\nconst GET_ALL_HABITS_DATE = gql`\n    query GetAllHabitDate($user: String!) {\n        habits(where: {user: {_eq: $user}}, order_by:{created_at:desc}){\n        id\n        name\n        start_date\n        unit\n        reps\n        duration\n        end_date\n        history{\n            date\n            val\n        }\n        }\n    }\n`;\n\nexport default function AllHabits () {\n\n    //using global store with context\n\n    const userID = sessionStorage.getItem('HabitTrackerUser');\n    console.log(userID)\n    \n    // const { loading, error, data } = useQuery( GET_HABIT_DATE, { variables: {id:\"4c74e9cc-5dff-4f68-94e2-ad296a1d4d93\"} } );\n    const { loading, error, data } = useQuery( GET_ALL_HABITS_DATE, { variables: {user:userID} } );\n    const [showHabit, setShowHabit] = React.useState([]);\n    const [curHabit, setCurHabit] = React.useState(null);\n    const [DateRange, setDateRange] = React.useState({\n        startDate: subMonths(new Date(),6),\n        endDate: new Date()\n    })\n    \n    // console.log('data : ', data.habits[0].history)\n    const handleChange = (val) => {\n        console.log('changed', val);\n        const hab = data.habits.filter((habit) => habit.id === val)\n        // setDateRange({\n        //     startDate: hab[0].start_date,\n        //     endDate: hab[0].end_date\n        // })\n        const formattedHab = [];\n        hab[0].history.forEach(element => {\n           formattedHab.push({\n               date: element.date,\n               count: element.val\n           }) \n        });\n        for(let i=DateRange.startDate;isBefore(i,new Date(hab[0].start_date));i=addDays(i,1)){\n            formattedHab.push({\n                date: format(i,'yyyy-MM-dd'),\n                count: -1\n            });\n        }\n        console.log(\"asdasdasd\", formattedHab)\n        setShowHabit(formattedHab);\n        console.log('curHab ->',hab[0]);\n        setCurHabit(hab[0]);\n    }\n\n    if (loading) {\n        return (\n            <div style={loadingStyle} >\n                <Spin/>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error);\n        return (\n            <div style={loadingStyle}>\n                <h4> Something went wrong! </h4>\n            </div>\n        )\n    }\n\n       \n        // const testing = data.habits.map(\n\n        // )\n        // let formatedDate = data.habits[0].history.map(data => ({ \n        // date: data.date,\n        // count: data.val\n        // }));\n        // console.log('formated data:::::::::::;',formatedDate);\n        return (\n        <>\n            <h2 style={{marginLeft:25,fontSize:'20pt'}}>Habit Progress Dashboard </h2>\n            <Select \n                defaultValue={'select habit'} \n                style={{width:130, margin:20, marginBottom:40, marginTop:25}} \n                onChange={handleChange}\n            >\n                {\n                    data.habits.map((habit) => {\n                        if(isBefore(new Date(),new Date(habit.end_date))){\n                            return (<Option value={habit.id}> {habit.name} </Option>);\n                        }\n                        return null;\n                    }) \n                }\n            </Select>\n            <div style={{height:'30%', width:'70%'}}>\n                <Row>\n                    <Col span={24}>\n                        <h2 style={{marginLeft:25,fontSize:'16pt'}}>Progress Heatmap</h2>\n                        <CalendarHeatmap\n                            startDate={DateRange.startDate}\n                            endDate={DateRange.endDate}\n                            values={showHabit}\n                            showWeekdayLabels={true}\n                            onClick={(val)=>val && alert(val.count)}\n                            tooltipDataAttrs={ (value) => {\n                                return {\n                                  'data-tip': (value.date) ? `date: ${value.date} and reps is ${value.count}` : \"incomplete\",\n                                };\n                              }}\n                              classForValue={value => {\n                                if(!!curHabit){\n                                   if(!!value){\n                                    switch(curHabit.unit){\n                                        case 'CHECK': if(value.count === 1)\n                                                        return 'color-scale-success';\n                                                      else\n                                                        return 'color-scale-invalid';  \n                                        default: console.log(value.count); \n                                                if(value.count ===((curHabit.unit==='REPS')?(curHabit.reps):(curHabit.duration)))\n                                                    return 'color-scale-success';\n                                                 else if (value.count > 0)\n                                                    return 'color-scale-partial'; \n                                                 else\n                                                    return 'color-scale-invalid';                             \n                                    }\n                                   }\n                                   else{\n                                       return 'color-scale-failure';\n                                   }\n                                }\n                                else{\n                                    return 'color-empty';\n                                }\n                              }}\n                        />\n                        <ReactTooltip />\n                    </Col>\n                </Row>\n            </div>\n        </>\n        )\n}","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/Header.js",["60","61"],"import React from 'react'\nimport { format } from 'date-fns'\nimport { Typography } from 'antd';\nimport { CalendarOutlined } from '@ant-design/icons';\n\nconst { Title } = Typography;\n\nconst headerContainer = {\n    display:'flex',\n    flexDirection:'row', \n    justifyContent:'space-between'\n}\nconst calendar = {\n    fontSize: '20px'\n}\n\nexport default function Header() {\n\n    const [curTime, setCurTime] = React.useState(format(new Date(), \"iiii, dd MMM YYY, HH:mm a\"));\n    React.useEffect(() => {\n        setInterval(() => {\n            const time = format(new Date(), \"iiii, dd MMM YYY, HH:mm a\");\n            setCurTime(time);\n        }, 1000)\n    }, []);\n\n    return (\n        <div style={headerContainer}>\n            <Title level={3} style={{fontFamily:'Krona One', fontWeight:500}}>{curTime}</Title>\n        </div>\n    )\n}\n","/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/NewHabit.js",["62","63","64","65"],"/Users/rto/Desktop/Habit-Tracker/frontend/src/components/dashboardComponents/HabitCard.js",["66"],"import React from 'react';\nimport { \n  Card, \n  Progress,\n  Button,\n  InputNumber\n} from 'antd';\nimport { getDay, sub, isBefore, differenceInCalendarDays } from 'date-fns';\nimport { ArrowsAltOutlined } from '@ant-design/icons';\nimport { useMutation } from '@apollo/client'\nimport { FINISH_HABIT, GET_USER_DETAILS, EDIT_HISTORY } from '../../query';\nimport { format } from 'date-fns'\n\nconst progress = {\n  display: 'flex',\n  flexDirection: 'col',\n  justifyContent: 'space-between'\n}\n\nconst valEdit = (val,unit,reps,dur) =>{\n  switch(unit){\n    case 'CHECK':  val = (val===1? 100 : 0);\n                   break;\n    case 'REPS': val = (val/reps)*100;    \n                  break;\n    default: val = (val/dur)*100;\n                  break;             \n  }\n  return val;\n};\n\nexport default function HabitCard({habitData, setEditData, showModal}) {\n  console.log('Habitdata::::::',habitData.history[0]);\n  const userID = sessionStorage.getItem('HabitTrackerUser');\n  const [ finishHabit ] = useMutation(FINISH_HABIT);\n  const [ editHabit ] = useMutation(EDIT_HISTORY);\n  const curDate = !!(habitData.history[0] && (habitData.history[0].date)===format(new Date(), \"yyyy-MM-dd\")); //boolean\n  const goalCount = (habitData.reps) ? habitData.reps : habitData.duration;\n  const days = ['Sun','Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const card_data = [];\n  let day_pointer = new Date();\n  const day_limit = sub(day_pointer,{days:7});\n  habitData.history.forEach(ele => {\n    let info = {};\n    const record = new Date(ele.date);\n    if(!isBefore(record,day_limit)){\n      for(let i=0;i<differenceInCalendarDays(day_pointer,record);i++){\n        let dead_day = { val: 0 };\n        dead_day.day_index = getDay(day_pointer);\n        card_data.push(dead_day);\n        day_pointer = sub(day_pointer,{days:1});\n      }\n      info.day_index = getDay(record);\n      info.val = valEdit(ele.val,habitData.unit,habitData.reps,habitData.duration);\n      card_data.push(info);\n      day_pointer = sub(day_pointer,{days:1});\n    }\n  });\n  for(let i=card_data.length;i<days.length;i++){\n    let info = {\n      day_index: getDay(day_pointer),\n    };\n    if(isBefore(day_pointer,new Date(habitData.start_date)))\n      info.val = -1;\n    else\n      info.val = 0; \n    card_data.push(info);\n    day_pointer = sub(day_pointer,{days:1});   \n  }\n\n  const circle = (val) => {\n    if(habitData.unit === 'REPS')\n      return `${Math.ceil((val/100)*habitData.reps)}`;\n    else if(habitData.unit === 'DURATION')\n      return `${Math.ceil((val/100)*habitData.duration)}`;\n    else\n      return val;\n  }  \n\n  const checkClicked = () => {\n    console.log('clicked');\n    finishHabit({\n      variables: {\n        id: habitData.id,\n        user: userID,\n        val: 1,\n        date: format(new Date(), \"yyyy-MM-dd\")\n      },\n      refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }]\n    })\n  }\n\n  const increaseCount = (val) => {\n    // console.log('clicked:', val, curDate)\n    (curDate)\n    ? \n      !!val && editHabit({\n        variables: {\n          id: habitData.history[0].id,\n          val: val\n        },\n        refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }]\n      })\n    :\n      !!val && finishHabit({\n        variables: {\n          id: habitData.id,\n          user: userID,\n          val: val,\n          date: format(new Date(), \"yyyy-MM-dd\")\n        },\n        refetchQueries: [{ query: GET_USER_DETAILS, variables: { email: userID } }]\n      })\n  }\n\n  console.log('card data:',card_data, habitData);\n    \n    return (\n      <div className=\"site-card-border-less-wrapper\" style={{paddingRight:30, paddingBottom: 30}}>\n        <Card \n          hoverable\n          title={<p style={{fontFamily:'Exo 2',fontWeight:400,fontSize:'20pt', margin:0}}>{habitData.name}</p>}\n          headStyle={{fontSize:20, fontWeight:'bold'}}\n          extra={\n            <ArrowsAltOutlined \n              onClick={ () => {\n                setEditData(habitData);\n                showModal();\n              }} \n              style={{ fontSize: 25 }} \n            />\n          } \n          bordered={true} \n          style={{ width:'30vw' }}\n        >\n          { (habitData.unit ==='CHECK')\n            ?\n              <Button \n                style={{position:'absolute', left:30}}\n                onClick={()=>checkClicked()}\n                disabled={curDate}\n              > \n                {curDate ? \"Completed\" : \"Done\" }\n              </Button>\n            :\n              <InputNumber \n                style={{position:'absolute', left:30}} \n                min={0}\n                max={goalCount}\n                disabled={curDate && (habitData.history[0].val===goalCount)}\n                onChange={increaseCount}\n                defaultValue={curDate ? habitData.history[0].val : null}\n                formatter={value=> (value==goalCount) ?  `Completed`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : value}\n                // parser={value => value.replace('Completed', '')}\n                // formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                placeholder={(habitData.unit==='REPS') ? \"Reps\" : \"Mins\"}\n              />\n          }\n          <p style={{ position:'relative', left:'30%', paddingBottom:10 }} > \n            {(habitData.unit!=='CHECK')\n              ? (habitData.reps) \n                ? `Habit Goal: ${habitData.reps} reps/day` \n                : `Habit Goal: ${habitData.duration} mins/day` \n              : 'Habit Goal: Yes/No'\n            } \n          </p>\n          <div style={progress}>\n            {\n              card_data.map((info,index)=>(\n                <div key={index} >\n                  {\n                    index === 0 && info.val === 0 ? (\n                      <Progress type=\"circle\" trailColor=\"#ffb95a\" percent={0} width={50}  format={()=>\"-\"} key={index} onClick={()=> (habitData.unit==='CHECK') && checkClicked()} />\n                    ):(\n                      info.val===0 || info.val===100 ? (\n                        <Progress type=\"circle\" percent={info.val} width={50} status={info.val === 0 ? 'exception':'success'} key={index} />\n                      ):( info.val === -1 ? (\n                        <Progress trailColor=\"#808080\" type=\"circle\" percent={0} width={50} format={()=>\"-\"} key={index} />\n                      ):(\n                        <Progress type=\"circle\" percent={info.val} width={50} format={circle} key={index} />\n                      )\n                      )\n                    )\n                  }\n                  <p>{days[info.day_index]}</p>\n                </div>\n              ))\n            }\n            \n            {/* <Progress type=\"circle\" percent={70} width={80} status=\"exception\" />\n            <Progress type=\"circle\" percent={100} width={80} /> */}\n          </div>\n          <p style={{marginTop:15}}>NOTE: {habitData.remainder_note}</p>\n        </Card>\n      </div>\n    )\n}\n","/Users/rto/Desktop/Habit-Tracker/frontend/src/query.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":25,"column":26,"nodeType":"73","messageId":"74","endLine":25,"endColumn":32},{"ruleId":"71","severity":1,"message":"75","line":24,"column":7,"nodeType":"73","messageId":"74","endLine":24,"endColumn":21},{"ruleId":"71","severity":1,"message":"76","line":62,"column":23,"nodeType":"73","messageId":"74","endLine":62,"endColumn":35},{"ruleId":"71","severity":1,"message":"77","line":4,"column":10,"nodeType":"73","messageId":"74","endLine":4,"endColumn":26},{"ruleId":"71","severity":1,"message":"78","line":13,"column":7,"nodeType":"73","messageId":"74","endLine":13,"endColumn":15},{"ruleId":"79","severity":1,"message":"80","line":135,"column":37,"nodeType":"81","messageId":"82","endLine":135,"endColumn":39},{"ruleId":"79","severity":1,"message":"80","line":135,"column":54,"nodeType":"81","messageId":"82","endLine":135,"endColumn":56},{"ruleId":"79","severity":1,"message":"80","line":145,"column":41,"nodeType":"81","messageId":"82","endLine":145,"endColumn":43},{"ruleId":"79","severity":1,"message":"80","line":145,"column":58,"nodeType":"81","messageId":"82","endLine":145,"endColumn":60},{"ruleId":"83","severity":1,"message":"84","line":153,"column":42,"nodeType":"85","messageId":"86","endLine":153,"endColumn":44},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'Footer' is assigned a value but never used.","Identifier","unusedVar","'GET_HABIT_DATE' is assigned a value but never used.","'setDateRange' is assigned a value but never used.","'CalendarOutlined' is defined but never used.","'calendar' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]