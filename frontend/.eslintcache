[{"D:\\github\\Habit-Tracker\\frontend\\src\\index.js":"1","D:\\github\\Habit-Tracker\\frontend\\src\\reportWebVitals.js":"2","D:\\github\\Habit-Tracker\\frontend\\src\\App.js":"3","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Home.js":"4","D:\\github\\Habit-Tracker\\frontend\\src\\store.js":"5","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Login.js":"6","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\Header.js":"7","D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\HabitCard.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":3243,"mtime":1608321517586,"results":"12","hashOfConfig":"10"},{"size":2233,"mtime":1608325696746,"results":"13","hashOfConfig":"10"},{"size":992,"mtime":1608312528478,"results":"14","hashOfConfig":"10"},{"size":10795,"mtime":1608317470891,"results":"15","hashOfConfig":"10"},{"size":815,"mtime":1608325290803,"results":"16","hashOfConfig":"10"},{"size":377,"mtime":1608325715860,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ng3klm",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\github\\Habit-Tracker\\frontend\\src\\index.js",[],["36","37"],"D:\\github\\Habit-Tracker\\frontend\\src\\reportWebVitals.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\App.js",["38","39","40","41","42"],"import React from 'react';\r\nimport Login from './components/Login';\r\nimport Home from './components/Home';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\nimport { BrowserRouter as Router,\r\n         Switch,\r\n         Route,\r\n         Redirect,\r\n         useHistory\r\n} from 'react-router-dom';\r\nimport { gql, useLazyQuery } from '@apollo/client';\r\nimport 'antd/dist/antd.css';\r\nimport { StateProvider, store } from './store';\r\n\r\n//Apollo client object. Used to make requests to the graphql API.\r\nconst client = new ApolloClient({\r\n  uri: 'https://habit-tracker.hasura.app/v1/graphql',\r\n  cache: new InMemoryCache(),\r\n  headers:{\r\n    'x-hasura-access': process.env.REACT_APP_API_PASS,\r\n  },\r\n});\r\n\r\nfunction PrivateRoute({ children, ...rest }) {\r\n\r\n  //Lazy query for user auth\r\n  const [getUser, getUserResult] = useLazyQuery(\r\n    gql`query getUser($email: String!){\r\n        users(where: {email: {_eq: $email}}) {\r\n          full_name\r\n          createdAt\r\n          email\r\n          habits {\r\n            bad_habit\r\n            end_date\r\n            habit_cycle\r\n            name\r\n            id\r\n            remainder_note\r\n            reminder_times\r\n            start_date\r\n            streak\r\n            unit\r\n          }\r\n        }\r\n      }`\r\n  );\r\n  const { state, dispatch } = React.useContext(store);\r\n  const sessionStore = sessionStorage.getItem('HabitTrackerUser');      // session storage user's emailID\r\n  const [ isAuthenticated, setAuthenticated ] = React.useState( !!state.full_name || !!sessionStore);\r\n  const history = useHistory();\r\n\r\n  // To fetch user data if users refreshes the page\r\n  // React.useEffect(() => {\r\n\r\n  //   if (sessionStore !== null && !isAuthenticated) {\r\n  //     setAuthenticated(true);\r\n  //     console.log('sessionstore:', sessionStore);\r\n  //     getUser({\r\n  //         variables:{\r\n  //             email: sessionStore,\r\n  //         }\r\n  //     });\r\n  //     while(getUserResult.loading){ }\r\n  //     if(getUserResult.error){\r\n  //         // handleError(getUserResult.error);\r\n  //         console.log('Error:',getUserResult.error)\r\n  //     }\r\n  //     else{\r\n  //         console.log('DATAA:::::', getUserResult)\r\n  //         const {data} = getUserResult;\r\n  //         if(data !== undefined){\r\n  //             dispatch(data.users[0]);\r\n  //         }\r\n  //         else{\r\n  //           history.replace('/login');\r\n  //         }\r\n  //     }\r\n  //   }\r\n\r\n  // }, []);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={() =>\r\n        isAuthenticated ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",       // redirect if not autheticated\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction App() {\r\n\r\n  return (\r\n   <StateProvider>\r\n      <ApolloProvider client={client}>\r\n         <Router>\r\n             <Switch>\r\n                 <Route exact path=\"/login\">\r\n                     <Login />\r\n                 </Route>\r\n                 <PrivateRoute exact path=\"/\">\r\n                     <Home />\r\n                 </PrivateRoute>\r\n             </Switch>\r\n         </Router>\r\n      </ApolloProvider>\r\n   </StateProvider>\r\n  );\r\n}\r\n\r\nexport default App;","D:\\github\\Habit-Tracker\\frontend\\src\\components\\Home.js",["43"],"D:\\github\\Habit-Tracker\\frontend\\src\\store.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\Login.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\Header.js",[],"D:\\github\\Habit-Tracker\\frontend\\src\\components\\dashboardComponents\\HabitCard.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":27,"column":10,"nodeType":"50","messageId":"51","endLine":27,"endColumn":17},{"ruleId":"48","severity":1,"message":"52","line":27,"column":19,"nodeType":"50","messageId":"51","endLine":27,"endColumn":32},{"ruleId":"48","severity":1,"message":"53","line":48,"column":18,"nodeType":"50","messageId":"51","endLine":48,"endColumn":26},{"ruleId":"48","severity":1,"message":"54","line":50,"column":28,"nodeType":"50","messageId":"51","endLine":50,"endColumn":44},{"ruleId":"48","severity":1,"message":"55","line":51,"column":9,"nodeType":"50","messageId":"51","endLine":51,"endColumn":16},{"ruleId":"48","severity":1,"message":"53","line":24,"column":20,"nodeType":"50","messageId":"51","endLine":24,"endColumn":28},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'getUser' is assigned a value but never used.","Identifier","unusedVar","'getUserResult' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'setAuthenticated' is assigned a value but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]